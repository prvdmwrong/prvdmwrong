import { TransformState } from "..";
import ts from "typescript";
type TypeCheck = (type: ts.Type) => boolean;
export declare function isDefinitelyType(type: ts.Type, ...callbacks: Array<TypeCheck>): boolean;
export declare function isPossiblyType(type: ts.Type, ...callbacks: Array<TypeCheck>): boolean;
export declare function isDefinedType(type: ts.Type): boolean;
export declare function isAnyType(state: TransformState): TypeCheck;
export declare function isBooleanType(type: ts.Type): boolean;
export declare function isBooleanLiteralType(state: TransformState, value: boolean): TypeCheck;
export declare function isNumberType(type: ts.Type): boolean;
export declare function isNumberLiteralType(value: number): TypeCheck;
export declare function isNaNType(type: ts.Type): boolean;
export declare function isStringType(type: ts.Type): boolean;
export declare function isArrayType(state: TransformState): TypeCheck;
export declare function isSetType(state: TransformState): TypeCheck;
export declare function isMapType(state: TransformState): TypeCheck;
export declare function isGeneratorType(state: TransformState): TypeCheck;
export declare function isIterableFunctionType(state: TransformState): TypeCheck;
export declare function isLuaTupleType(state: TransformState): TypeCheck;
export declare function isIterableFunctionLuaTupleType(state: TransformState): TypeCheck;
export declare function isIterableType(state: TransformState): TypeCheck;
export declare function isObjectType(type: ts.Type): boolean;
export declare function isUndefinedType(type: ts.Type): boolean;
export declare function isEmptyStringType(type: ts.Type): boolean;
export declare function isRoactElementType(state: TransformState): TypeCheck;
export declare function walkTypes(type: ts.Type, callback: (type: ts.Type) => void): void;
export declare function getFirstConstructSymbol(state: TransformState, expression: ts.Expression): ts.Symbol | undefined;
export declare function getFirstDefinedSymbol(state: TransformState, type: ts.Type): ts.Symbol | undefined;
export declare function getTypeArguments(state: TransformState, type: ts.Type): readonly ts.Type[];
export {};
