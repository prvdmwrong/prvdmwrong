"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureTransformOrder = void 0;
const luau_ast_1 = __importDefault(require("@roblox-ts/luau-ast"));
const findLastIndex_1 = require("../../Shared/util/findLastIndex");
const transformExpression_1 = require("../nodes/expressions/transformExpression");
const isSymbolMutable_1 = require("./isSymbolMutable");
const typescript_1 = __importDefault(require("typescript"));
function ensureTransformOrder(state, expressions) {
    const expressionInfoList = expressions.map(exp => state.capture(() => (0, transformExpression_1.transformExpression)(state, exp)));
    const lastArgWithPrereqsIndex = (0, findLastIndex_1.findLastIndex)(expressionInfoList, info => !luau_ast_1.default.list.isEmpty(info[1]));
    const result = new Array();
    for (let i = 0; i < expressionInfoList.length; i++) {
        const info = expressionInfoList[i];
        state.prereqList(info[1]);
        let isConstVar = false;
        const exp = expressions[i];
        if (typescript_1.default.isIdentifier(exp)) {
            const symbol = state.typeChecker.getSymbolAtLocation(exp);
            if (symbol && !(0, isSymbolMutable_1.isSymbolMutable)(state, symbol)) {
                isConstVar = true;
            }
        }
        let expression = info[0];
        if (i < lastArgWithPrereqsIndex &&
            !luau_ast_1.default.isSimplePrimitive(expression) &&
            !luau_ast_1.default.isTemporaryIdentifier(expression) &&
            !isConstVar) {
            expression = state.pushToVar(expression, "exp");
        }
        result.push(expression);
    }
    return result;
}
exports.ensureTransformOrder = ensureTransformOrder;
//# sourceMappingURL=ensureTransformOrder.js.map