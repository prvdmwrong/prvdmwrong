"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformJsx = void 0;
const luau_ast_1 = __importDefault(require("@roblox-ts/luau-ast"));
const diagnostics_1 = require("../../../Shared/diagnostics");
const DiagnosticService_1 = require("../../classes/DiagnosticService");
const RoactSymbolManager_1 = require("../../classes/RoactSymbolManager");
const transformExpression_1 = require("../expressions/transformExpression");
const transformJsxAttributes_1 = require("./transformJsxAttributes");
const transformJsxChildren_1 = require("./transformJsxChildren");
const transformJsxTagName_1 = require("./transformJsxTagName");
const createRoactIndex_1 = require("../../util/jsx/createRoactIndex");
const getKeyAttributeInitializer_1 = require("../../util/jsx/getKeyAttributeInitializer");
const pointer_1 = require("../../util/pointer");
const typescript_1 = __importDefault(require("typescript"));
function transformJsx(state, node, tagName, attributes, children) {
    if (state.compilerOptions.jsxFactory !== "Roact.createElement") {
        DiagnosticService_1.DiagnosticService.addSingleDiagnostic(diagnostics_1.errors.invalidJsxFactory(node));
        return luau_ast_1.default.none();
    }
    const isFragment = state.services.roactSymbolManager &&
        state.typeChecker.getSymbolAtLocation(tagName) ===
            state.services.roactSymbolManager.getSymbolOrThrow(RoactSymbolManager_1.ROACT_SYMBOL_NAMES.Fragment);
    const tagNameExp = !isFragment ? (0, transformJsxTagName_1.transformJsxTagName)(state, tagName) : luau_ast_1.default.none();
    const attributesPtr = (0, pointer_1.createMapPointer)("attributes");
    const childrenPtr = (0, pointer_1.createMixedTablePointer)("children");
    (0, transformJsxAttributes_1.transformJsxAttributes)(state, attributes, attributesPtr);
    (0, transformJsxChildren_1.transformJsxChildren)(state, children, attributesPtr, childrenPtr);
    const args = new Array();
    if (!isFragment) {
        args.push(tagNameExp);
    }
    const pushAttributes = luau_ast_1.default.isAnyIdentifier(attributesPtr.value) || !luau_ast_1.default.list.isEmpty(attributesPtr.value.fields);
    const pushChildren = luau_ast_1.default.isAnyIdentifier(childrenPtr.value) || !luau_ast_1.default.list.isEmpty(childrenPtr.value.fields);
    if (!isFragment && (pushAttributes || pushChildren)) {
        args.push(attributesPtr.value);
    }
    if (pushChildren) {
        args.push(childrenPtr.value);
    }
    let result = luau_ast_1.default.call(isFragment ? (0, createRoactIndex_1.createRoactIndex)("createFragment") : (0, createRoactIndex_1.createRoactIndex)("createElement"), args);
    if (!typescript_1.default.isJsxElement(node.parent)) {
        const keyInitializer = (0, getKeyAttributeInitializer_1.getKeyAttributeInitializer)(node);
        if (keyInitializer) {
            const [key, keyPrereqs] = state.capture(() => (0, transformExpression_1.transformExpression)(state, keyInitializer));
            state.prereqList(keyPrereqs);
            result = luau_ast_1.default.call((0, createRoactIndex_1.createRoactIndex)("createFragment"), [luau_ast_1.default.map([[key, result]])]);
        }
    }
    return result;
}
exports.transformJsx = transformJsx;
//# sourceMappingURL=transformJsx.js.map