"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformJsxChildren = void 0;
const luau_ast_1 = __importDefault(require("@roblox-ts/luau-ast"));
const diagnostics_1 = require("../../../Shared/diagnostics");
const assert_1 = require("../../../Shared/util/assert");
const DiagnosticService_1 = require("../../classes/DiagnosticService");
const transformExpression_1 = require("../expressions/transformExpression");
const createTypeCheck_1 = require("../../util/createTypeCheck");
const getKeyAttributeInitializer_1 = require("../../util/jsx/getKeyAttributeInitializer");
const offset_1 = require("../../util/offset");
const pointer_1 = require("../../util/pointer");
const types_1 = require("../../util/types");
const wrapExpressionStatement_1 = require("../../util/wrapExpressionStatement");
const typescript_1 = __importDefault(require("typescript"));
function createJsxAddNumericChild(id, lengthId, key, value) {
    return luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.Assignment, {
        left: luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.ComputedIndexExpression, {
            expression: id,
            index: luau_ast_1.default.binary(lengthId, "+", key),
        }),
        operator: "=",
        right: value,
    });
}
function createJsxAddKeyChild(id, keyId, valueId) {
    return luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.Assignment, {
        left: luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.ComputedIndexExpression, {
            expression: id,
            index: keyId,
        }),
        operator: "=",
        right: valueId,
    });
}
function createJsxAddAmbiguousChildren(id, amtSinceUpdate, lengthId, expression) {
    const keyId = luau_ast_1.default.tempId("k");
    const valueId = luau_ast_1.default.tempId("v");
    return luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.ForStatement, {
        ids: luau_ast_1.default.list.make(keyId, valueId),
        expression,
        statements: luau_ast_1.default.list.make(luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.IfStatement, {
            condition: (0, createTypeCheck_1.createTypeCheck)(keyId, luau_ast_1.default.strings.number),
            statements: luau_ast_1.default.list.make(createJsxAddNumericChild(id, (0, offset_1.offset)(lengthId, amtSinceUpdate), keyId, valueId)),
            elseBody: luau_ast_1.default.list.make(createJsxAddKeyChild(id, keyId, valueId)),
        })),
    });
}
function createJsxAddArrayChildren(id, amtSinceUpdate, lengthId, expression) {
    const keyId = luau_ast_1.default.tempId("k");
    const valueId = luau_ast_1.default.tempId("v");
    return luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.ForStatement, {
        ids: luau_ast_1.default.list.make(keyId, valueId),
        expression,
        statements: luau_ast_1.default.list.make(createJsxAddNumericChild(id, (0, offset_1.offset)(lengthId, amtSinceUpdate), keyId, valueId)),
    });
}
function createJsxAddMapChildren(id, expression) {
    const keyId = luau_ast_1.default.tempId("k");
    const valueId = luau_ast_1.default.tempId("v");
    return luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.ForStatement, {
        ids: luau_ast_1.default.list.make(keyId, valueId),
        expression,
        statements: luau_ast_1.default.list.make(createJsxAddKeyChild(id, keyId, valueId)),
    });
}
function countCreateJsxAddChildExpressionUses(isPossiblyUndefinedOrFalse, isPossiblyTrue, isPossiblyElement, isPossiblyArray, isPossiblyMap) {
    let expUses = 0;
    if (isPossiblyElement) {
        expUses += 1;
    }
    if (isPossiblyArray || isPossiblyMap) {
        expUses += 1;
        if (isPossiblyElement) {
            expUses += 3;
        }
    }
    if ((isPossiblyUndefinedOrFalse || isPossiblyTrue) && (isPossiblyElement || isPossiblyArray || isPossiblyMap)) {
        expUses += 1;
    }
    return expUses;
}
function createJsxAddChild(state, id, amtSinceUpdate, lengthId, expression, type) {
    const isPossiblyUndefinedOrFalse = (0, types_1.isPossiblyType)(type, types_1.isUndefinedType, (0, types_1.isBooleanLiteralType)(state, false));
    const isPossiblyTrue = (0, types_1.isPossiblyType)(type, (0, types_1.isBooleanLiteralType)(state, true));
    const isPossiblyElement = (0, types_1.isPossiblyType)(type, (0, types_1.isRoactElementType)(state));
    let areMapKeysPossiblyNumber = false;
    const isPossiblyMap = (0, types_1.isPossiblyType)(type, t => {
        if ((0, types_1.isMapType)(state)(t)) {
            if (!areMapKeysPossiblyNumber) {
                const typeArguments = (0, types_1.getTypeArguments)(state, t);
                if ((0, types_1.isPossiblyType)(typeArguments[0], types_1.isNumberType)) {
                    areMapKeysPossiblyNumber = true;
                }
            }
            return true;
        }
        return false;
    });
    const isPossiblyArray = areMapKeysPossiblyNumber || (0, types_1.isPossiblyType)(type, (0, types_1.isArrayType)(state));
    const expUses = countCreateJsxAddChildExpressionUses(isPossiblyUndefinedOrFalse, isPossiblyTrue, isPossiblyElement, isPossiblyArray, isPossiblyMap);
    if (expUses > 1) {
        expression = state.pushToVarIfNonId(expression, "child");
    }
    let statement;
    if (isPossiblyElement) {
        statement = createJsxAddNumericChild(id, lengthId, luau_ast_1.default.number(amtSinceUpdate + 1), expression);
    }
    if (isPossiblyArray || isPossiblyMap) {
        let loop;
        if (isPossiblyArray && isPossiblyMap) {
            loop = createJsxAddAmbiguousChildren(id, amtSinceUpdate, lengthId, expression);
        }
        else if (isPossiblyArray) {
            loop = createJsxAddArrayChildren(id, amtSinceUpdate, lengthId, expression);
        }
        else {
            loop = createJsxAddMapChildren(id, expression);
        }
        if (isPossiblyElement) {
            (0, assert_1.assert)(luau_ast_1.default.isAnyIdentifier(expression));
            const isFragmentCheck = luau_ast_1.default.binary(luau_ast_1.default.property(expression, "elements"), "~=", luau_ast_1.default.nil());
            const hasPropsCheck = luau_ast_1.default.binary(luau_ast_1.default.property(expression, "props"), "~=", luau_ast_1.default.nil());
            const hasComponentCheck = luau_ast_1.default.binary(luau_ast_1.default.property(expression, "component"), "~=", luau_ast_1.default.nil());
            const isElementCheck = luau_ast_1.default.binary(hasPropsCheck, "and", hasComponentCheck);
            const isElementLikeCheck = luau_ast_1.default.binary(isFragmentCheck, "or", isElementCheck);
            statement = luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.IfStatement, {
                condition: isElementLikeCheck,
                statements: luau_ast_1.default.list.make(statement),
                elseBody: luau_ast_1.default.list.make(loop),
            });
        }
        else {
            statement = loop;
        }
    }
    if (isPossiblyUndefinedOrFalse || isPossiblyTrue) {
        if (isPossiblyElement || isPossiblyArray || isPossiblyMap) {
            let condition;
            if (isPossiblyTrue) {
                condition = (0, createTypeCheck_1.createTypeCheck)(expression, luau_ast_1.default.strings.table);
            }
            else {
                condition = expression;
            }
            statement = luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.IfStatement, {
                condition,
                statements: luau_ast_1.default.list.make(statement),
                elseBody: luau_ast_1.default.list.make(),
            });
        }
        else {
            state.prereqList((0, wrapExpressionStatement_1.wrapExpressionStatement)(expression));
        }
    }
    (0, assert_1.assert)(statement);
    return statement;
}
function transformJsxChildren(state, children, attributesPtr, childrenPtr) {
    const lengthId = luau_ast_1.default.tempId("length");
    let lengthInitialized = false;
    let amtSinceUpdate = 0;
    function updateLengthId() {
        const right = luau_ast_1.default.unary("#", childrenPtr.value);
        if (lengthInitialized) {
            state.prereq(luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.Assignment, {
                left: lengthId,
                operator: "=",
                right,
            }));
        }
        else {
            state.prereq(luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.VariableDeclaration, {
                left: lengthId,
                right,
            }));
            lengthInitialized = true;
        }
        amtSinceUpdate = 0;
    }
    function disableInline() {
        if (luau_ast_1.default.isMixedTable(childrenPtr.value)) {
            if (luau_ast_1.default.isMap(attributesPtr.value) && !luau_ast_1.default.list.isEmpty(attributesPtr.value.fields)) {
                (0, pointer_1.disableMapInline)(state, attributesPtr);
            }
            (0, pointer_1.disableMixedTableInline)(state, childrenPtr);
            updateLengthId();
        }
    }
    let lastUsefulElementIndex;
    for (lastUsefulElementIndex = children.length - 1; lastUsefulElementIndex >= 0; lastUsefulElementIndex--) {
        const child = children[lastUsefulElementIndex];
        if (!typescript_1.default.isJsxText(child) || !child.containsOnlyTriviaWhiteSpaces)
            break;
    }
    for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (typescript_1.default.isJsxText(child)) {
            if (!child.containsOnlyTriviaWhiteSpaces && child.text.match(/\S/)) {
                DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noJsxText(child));
            }
            continue;
        }
        if (typescript_1.default.isJsxExpression(child)) {
            const innerExp = child.expression;
            if (innerExp) {
                const [expression, prereqs] = state.capture(() => (0, transformExpression_1.transformExpression)(state, innerExp));
                if (!luau_ast_1.default.list.isEmpty(prereqs)) {
                    state.prereqList(prereqs);
                    disableInline();
                }
                if (child.dotDotDotToken) {
                    disableInline();
                    (0, assert_1.assert)(luau_ast_1.default.isAnyIdentifier(childrenPtr.value));
                    state.prereq(createJsxAddArrayChildren(childrenPtr.value, amtSinceUpdate, lengthId, expression));
                }
                else {
                    const type = state.getType(innerExp);
                    if ((0, types_1.isDefinitelyType)(type, (0, types_1.isRoactElementType)(state))) {
                        if (luau_ast_1.default.isMixedTable(childrenPtr.value)) {
                            luau_ast_1.default.list.push(childrenPtr.value.fields, expression);
                        }
                        else {
                            state.prereq(createJsxAddNumericChild(childrenPtr.value, lengthId, luau_ast_1.default.number(amtSinceUpdate + 1), expression));
                        }
                        amtSinceUpdate++;
                    }
                    else {
                        disableInline();
                        (0, assert_1.assert)(luau_ast_1.default.isAnyIdentifier(childrenPtr.value));
                        state.prereq(createJsxAddChild(state, childrenPtr.value, amtSinceUpdate, lengthId, expression, type));
                    }
                }
                if (!luau_ast_1.default.isMixedTable(childrenPtr.value) && i < lastUsefulElementIndex) {
                    updateLengthId();
                }
            }
        }
        else {
            const [expression, prereqs] = state.capture(() => (0, transformExpression_1.transformExpression)(state, child));
            if (!luau_ast_1.default.list.isEmpty(prereqs)) {
                disableInline();
            }
            state.prereqList(prereqs);
            const keyInitializer = !typescript_1.default.isJsxFragment(child) && (0, getKeyAttributeInitializer_1.getKeyAttributeInitializer)(child);
            if (keyInitializer) {
                const [key, keyPrereqs] = state.capture(() => (0, transformExpression_1.transformExpression)(state, keyInitializer));
                if (!luau_ast_1.default.list.isEmpty(keyPrereqs)) {
                    disableInline();
                }
                state.prereqList(keyPrereqs);
                (0, pointer_1.assignToMixedTablePointer)(state, childrenPtr, key, expression);
            }
            else {
                if (luau_ast_1.default.isMixedTable(childrenPtr.value)) {
                    luau_ast_1.default.list.push(childrenPtr.value.fields, expression);
                }
                else {
                    state.prereq(createJsxAddNumericChild(childrenPtr.value, lengthId, luau_ast_1.default.number(amtSinceUpdate + 1), expression));
                }
                amtSinceUpdate++;
            }
        }
    }
}
exports.transformJsxChildren = transformJsxChildren;
//# sourceMappingURL=transformJsxChildren.js.map