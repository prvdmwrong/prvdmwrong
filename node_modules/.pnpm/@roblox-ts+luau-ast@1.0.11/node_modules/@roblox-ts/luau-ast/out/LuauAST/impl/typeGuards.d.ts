import * as luau from "../bundle";
export declare const isAnyIdentifier: (node: luau.Node) => node is luau.Identifier | luau.TemporaryIdentifier;
export declare const isIdentifier: (node: luau.Node) => node is luau.Identifier;
export declare const isTemporaryIdentifier: (node: luau.Node) => node is luau.TemporaryIdentifier;
export declare const isComputedIndexExpression: (node: luau.Node) => node is luau.ComputedIndexExpression;
export declare const isPropertyAccessExpression: (node: luau.Node) => node is luau.PropertyAccessExpression;
export declare const isCallExpression: (node: luau.Node) => node is luau.CallExpression;
export declare const isMethodCallExpression: (node: luau.Node) => node is luau.MethodCallExpression;
export declare const isParenthesizedExpression: (node: luau.Node) => node is luau.ParenthesizedExpression;
export declare function isIndexableExpression(node: luau.Node): node is luau.IndexableExpression;
export declare const isNone: (node: luau.Node) => node is luau.None;
export declare const isNilLiteral: (node: luau.Node) => node is luau.NilLiteral;
export declare const isFalseLiteral: (node: luau.Node) => node is luau.FalseLiteral;
export declare const isTrueLiteral: (node: luau.Node) => node is luau.TrueLiteral;
export declare const isNumberLiteral: (node: luau.Node) => node is luau.NumberLiteral;
export declare const isStringLiteral: (node: luau.Node) => node is luau.StringLiteral;
export declare const isVarArgsLiteral: (node: luau.Node) => node is luau.VarArgsLiteral;
export declare const isFunctionExpression: (node: luau.Node) => node is luau.FunctionExpression;
export declare const isBinaryExpression: (node: luau.Node) => node is luau.BinaryExpression;
export declare const isUnaryExpression: (node: luau.Node) => node is luau.UnaryExpression;
export declare const isIfExpression: (node: luau.Node) => node is luau.IfExpression;
export declare const isInterpolatedString: (node: luau.Node) => node is luau.InterpolatedString;
export declare const isArray: (node: luau.Node) => node is luau.Array;
export declare const isMap: (node: luau.Node) => node is luau.Map;
export declare const isSet: (node: luau.Node) => node is luau.Set;
export declare const isMixedTable: (node: luau.Node) => node is luau.MixedTable;
export declare function isExpression(node: luau.Node): node is luau.Expression;
export declare const isAssignment: (node: luau.Node) => node is luau.Assignment;
export declare const isBreakStatement: (node: luau.Node) => node is luau.BreakStatement;
export declare const isCallStatement: (node: luau.Node) => node is luau.CallStatement;
export declare const isContinueStatement: (node: luau.Node) => node is luau.ContinueStatement;
export declare const isDoStatement: (node: luau.Node) => node is luau.DoStatement;
export declare const isWhileStatement: (node: luau.Node) => node is luau.WhileStatement;
export declare const isRepeatStatement: (node: luau.Node) => node is luau.RepeatStatement;
export declare const isIfStatement: (node: luau.Node) => node is luau.IfStatement;
export declare const isNumericForStatement: (node: luau.Node) => node is luau.NumericForStatement;
export declare const isForStatement: (node: luau.Node) => node is luau.ForStatement;
export declare const isFunctionDeclaration: (node: luau.Node) => node is luau.FunctionDeclaration;
export declare const isMethodDeclaration: (node: luau.Node) => node is luau.MethodDeclaration;
export declare const isVariableDeclaration: (node: luau.Node) => node is luau.VariableDeclaration;
export declare const isReturnStatement: (node: luau.Node) => node is luau.ReturnStatement;
export declare const isComment: (node: luau.Node) => node is luau.Comment;
export declare function isStatement(node: luau.Node): node is luau.Statement;
export declare const isMapField: (node: luau.Node) => node is luau.MapField;
export declare const isInterpolatedStringPart: (node: luau.Node) => node is luau.InterpolatedStringPart;
export declare function isField(node: luau.Node): node is luau.Field;
export declare function isNode(value: unknown): value is luau.Node;
export declare const isSimple: (node: luau.Node) => node is luau.Identifier | luau.TemporaryIdentifier | luau.NilLiteral | luau.FalseLiteral | luau.TrueLiteral | luau.NumberLiteral | luau.StringLiteral;
export declare const isSimplePrimitive: (node: luau.Node) => node is luau.NilLiteral | luau.FalseLiteral | luau.TrueLiteral | luau.NumberLiteral | luau.StringLiteral;
export declare const isTable: (node: luau.Node) => node is luau.Array | luau.Map | luau.Set | luau.MixedTable;
export declare const isFinalStatement: (node: luau.Node) => node is luau.BreakStatement | luau.ContinueStatement | luau.ReturnStatement;
export declare const isCall: (node: luau.Node) => node is luau.CallExpression | luau.MethodCallExpression;
export declare const isWritableExpression: (node: luau.Node) => node is luau.WritableExpression;
export declare const isFunctionLike: (node: luau.Node) => node is luau.FunctionExpression | luau.FunctionDeclaration | luau.MethodDeclaration;
export declare const hasStatements: (node: luau.Node) => node is luau.FunctionExpression | luau.DoStatement | luau.WhileStatement | luau.RepeatStatement | luau.IfStatement | luau.NumericForStatement | luau.ForStatement | luau.FunctionDeclaration | luau.MethodDeclaration;
export declare const isExpressionWithPrecedence: (node: luau.Node) => node is luau.BinaryExpression | luau.UnaryExpression | luau.IfExpression;
