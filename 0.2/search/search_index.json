{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"LuauTypeScript <pre><code>local prvd = require(\"@pkg/prvdmwrong-core\")\nlocal CharacterProvider = require(\"./character-provider\")\n\n-- ... snip ...\n\nlocal CombatProvider = {}\ntype Self = typeof(CombatController)\n\n-- Just specify providers to use them!\nCombatProvider.characterProvider = CharacterProvider\n\n-- `onStart` is a built-in startup lifecycle.\nfunction CombatProvider:onStart()\n  print(\"Hello, Prvd 'M Wrong!\")\nend\n\n-- Providers can have *anything*!\nfunction CombatProvider.performMove(self: Self, move: CombatMove)\n  local character = self.characterProvider:awaitCharacter()\n  character:PivotTo(character.Position * move.startPosition)\nend\n\nreturn prvd(CombatProvider)\n</code></pre> <pre><code>import { Provider, OnStart } from \"@prvdmwrong/core\"\nimport { CharacterProvider } from \"./character-provider\"\n\n// ... snip ...\n\n@Provider()\nexport class CombatProvider implements OnStart {\n  // Just specify providers to use them!\n  public characterProvider = CharacterProvider\n\n  // `onStart` is a built-in startup lifecycle.\n  public onStart() {\n    print(\"Hello, Prvd 'M Wrong!\")\n  }\n\n  // Providers can have *anything*!\n  public performMove(move: CombatMove) {\n    const character = this.characterProvider.awaitCharacter()\n    character.PivotTo(character.Position.mul(move.startPosition))\n  }\n}\n</code></pre> <ul> <li>Providers</li> <li>Dependency Resolution</li> <li>Type Safety</li> <li>TypeScript</li> </ul> <ul> <li>Modding</li> <li>Referencing</li> <li>Lifecycles</li> <li>Reflection Metadata</li> </ul> <ul> <li>Networking</li> <li>Components</li> <li>Debugger</li> <li>Compatibility Layers</li> </ul>"},{"location":"#prvd-m-wrong","title":"Prvd 'M Wrong","text":""},{"location":"#the-bleeding-edge-framework","title":"The bleeding edge framework.","text":"<p> Roblox games have become increasingly complex, with sprawling mazes of dependencies, incomplete frameworks, and a challenging development experience. </p> <p> No longer. Prvd 'M Wrong builds upon the proven service provider architecture. Create service providers to handle the top level logic of your game, baked with natural type-safety, dependency resolution, and first-class lifecycles. </p> <p> From simple foundations, concepts naturally combine and expand with minimal learning. Even after year long hiatuses, you will find your game easy to navigate and understand. Randoms will approach you and ask, \"do you make a six-figure salary?\" </p> Tutorials Installation API Reference"},{"location":"#familiar","title":"Familiar","text":"<p> Prvd 'M Wrong stands on the shoulders of giants, particularly Flamework and Knit, building on a proven service provider architecture. </p> <p>Create service providers to handle the top level logic of your game, baked with natural type-safety and intellisense, built-in dependency resolution, first-class lifecycles, topped with pragmatic APIs.</p> <p>Transition your entire codebase with one of the many compatibility packages. Just change where you require the original framework, and let Prvd 'M Wrong do the heavy lifting.</p> <p>Can your <code>Knit.CreateService</code> or <code>@Service()</code> do better?</p>"},{"location":"#batteries-included","title":"Batteries Included","text":"<p> Prvd 'M Wrong brings all core features expected by a modern framework and even improves some of them for you. Mix in packages for networking, components, and pre-made lifecycles as needed. Absolutely zero bloat, transformers, or extensions required. </p> <p></p> <p></p> <p> </p> <p>Get Started Download API Reference</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>Welcome to the API Reference! This section provides detailed reference documentation that Prvd 'M Wrong offers.</p> <p>For an introduction to Prvd 'M Wrong, see the tutorials.</p>"},{"location":"api-reference/#packages","title":"Packages","text":"@prvdmwrong/core  Implements provider primitives, lifecycles, modding hooks, and everything needed to bootstrap a barebones game.   @prvdmwrong/lifecycles  Extends Prvd 'M Wrong with common lifecycle events for player tracking, scheduling, and the runtime.   @prvdmwrong/net  Extends Prvd 'M Wrong with remote networking primitives.   @prvdmwrong/components  Extends Prvd 'M Wrong with a component system.   @prvdmwrong/debugger  Extends Prvd 'M Wrong with a runtime debugger for providers.   @prvdmwrong/knit-compat  Compatibility layer between the Luau Knit framework and Prvd 'M Wrong. Preserves some singleton types and promise-based startup.   @prvdmwrong/lumin-compat  Compatibility layer between Lumin Framework and Prvd 'M Wrong. Preserves controller types, worker APIs and promise-based startup.   @prvdmwrong/sapphire-compat  Compatibility layer between Sapphire and Prvd 'M Wrong. Preserves singletons, some of the extension APIs, and startup.   @prvdmwrong/catwork-compat  Compatibility layer between Catwork and Prvd 'M Wrong. Preserves fragments, service APIs, and templates. Also includes a runtime to be used.   rbxts-prvdmwrong-flamework  Transforms TypeScript Flamework 1.0 projects to Prvd 'M Wrong. Preserves singletons, some user macros, modding APIs, and reflection APIs."},{"location":"api-reference/errors/","title":"Errors","text":"API Reference"},{"location":"api-reference/errors/#errors","title":"Errors","text":"<p>Prvd 'M Wrong attaches an error ID with every console log message. This is used to uniquely identify what kind of error or message you're seeing.</p> <p>Use the search box below to paste in or type an error ID, and it will scroll to the details for you.</p> <p></p>"},{"location":"api-reference/errors/#alreadystarted","title":"alreadyStarted","text":"<pre><code>Cannot start more than once.\n</code></pre> <p>You attempted to start Prvd 'M Wrong when it has already started.</p>"},{"location":"api-reference/errors/#cannotregister","title":"cannotRegister","text":"<pre><code>Cannot register provider; `MyProvider.onStart` should be a function.\n</code></pre> <p>You attempted to register a new provider, but Prvd 'M Wrong caught something wrong. The error includes a more specific message which can be used to diagnose the issue. Typically it is one of the following:</p> <ul> <li>You have frozen the provider table, which prevents dependency resolution</li> <li>You provided a mismatched type for a built-in method/property</li> </ul>"},{"location":"api-reference/errors/#cannotregisterlifecycle","title":"cannotRegisterLifecycle","text":"<pre><code>Cannot register lifecycle onShutdown; already registered lifecycle.\n</code></pre> <p>You attempted to create or register a lifecycle, but Prvd 'M Wrong caught something wrong. The error includes a more specific message which can be used to diagnose the issue. Typically it is one of the following:</p> <ul> <li>You did not provide a <code>method</code> to listen for</li> <li>You did not provide a <code>fire</code> handler in the constructor</li> <li>A provider tried to register the same lifecycle twice</li> <li>A provider has a mismatched type for the lifecycle</li> </ul>"},{"location":"api-reference/errors/#compatdeprecated","title":"compatDeprecated","text":"<pre><code>Use the `Lifecycle` object or the `@prvdmwrong/lifecycles` package instead of creating `Worker()`s; lifecycles have furthered customizability and hook onto providers, with the latter implementing all workers Lumin Framework offers as lifecycles\n</code></pre> <p>You used a method from a compatibility package that has a Prvd 'M Wrong equivalent, which should be used instead. The warning includes a more specific message.</p>"},{"location":"api-reference/errors/#incompatibleversion","title":"incompatibleVersion","text":"<pre><code>An incompatible core Prvd 'M Wrong package was found. Currently version 0.2.0-dev.9, found version 0.2.0-dev.12. Consider updating your installation.\n</code></pre> <p>A global reference to Prvd 'M Wrong was found, but the referenced package is not backwards-compatible with the current package. Consider updating to a newer version for an expanded featureset and improved developer experience.</p>"},{"location":"api-reference/errors/#invalidloadparent","title":"invalidLoadParent","text":"<p>Thrown by: <code>prvd.preload</code></p> <pre><code>`preload` must be given an instance\n</code></pre> <p><code>preload()</code> expects you to give it a parent instance to load from, but you gave it something else.</p>"},{"location":"api-reference/errors/#invalidonstartcallback","title":"invalidOnStartCallback","text":"<pre><code>`onStart` must be given callbacks\n</code></pre> <p><code>onStart()</code> expects a callback to spawn after startup finishes, but you gave it something else.</p>"},{"location":"api-reference/errors/#invalidrefversion","title":"invalidRefVersion","text":"<pre><code>Cannot parse major version from the global Prvd 'M Wrong reference, see if there is a corrupt installation.\n</code></pre> <p>A global reference to Prvd 'M Wrong was found, but the version of the referenced package cannot be parsed. As such, Prvd 'M Wrong cannot determine if the package is backwards compatible.</p> <p>You should not see this error unless you are using a fork of Prvd 'M Wrong.</p>"},{"location":"api-reference/errors/#luminmissingworker","title":"luminMissingWorker","text":"<pre><code>PsotSimulation is not a Lumin Framework worker.\n</code></pre> <p>You attempted to create a new worker using the Lumin Framework compatibility layer, but Prvd 'M Wrong cannot determine what event to adapt.</p> <p>Consider migrating to Prvd 'M Wrong and use the <code>Lifecycle</code> object or the <code>@prvdmwrong/lifecycles</code> package for the same functionality as lifecycles.</p>"},{"location":"api-reference/errors/#noprvd","title":"noPrvd","text":"<pre><code>Cannot find the `@prvdmwrong/core` package, try requiring the core package earlier so other packages can reference it.\n</code></pre> <p>You attempted to require another Prvd 'M Wrong package prior to requiring the core package. As such, the external package cannot find the global Prvd 'M Wrong reference to use.</p> <p>Consider requiring the core package earlier so Prvd 'M Wrong can initialize itself.</p>"},{"location":"api-reference/errors/#oniniterror","title":"onInitError","text":"<pre><code>Cannot initialize MyProvider; attempted to index nil with 'property'.\n</code></pre> <p>Prvd 'M Wrong could not finish its initialization lifecycle as a provider threw an error in it's <code>:init</code> method. The error includes a more specific message which can be used to diagnose the issue.</p>"},{"location":"api-reference/errors/#registerafterstart","title":"registerAfterStart","text":"<pre><code>Cannot register providers after startup.\n</code></pre> <p>You attempted to register a provider after startup.</p> <p>Make sure you've preloaded all providers you will use prior to startup, and that no other module registers a provider after startup.</p>"},{"location":"api-reference/errors/#requireerror","title":"requireError","text":"<pre><code>Cannot require ServerScriptService.Providers.MyProvider; Module code did not return exactly one value.\n</code></pre> <p>You tried to preload a module which threw an error that Prvd 'M Wrong cannot handle. The error includes a more specific message which can be used to diagnose the issue.</p>"},{"location":"api-reference/errors/#unknownerror","title":"unknownError","text":"<pre><code>Unknown error: attempt to call a nil value. This indicates Prvd 'M Wrong isn't reporting errors correctly, please file an issue.\n</code></pre> <p>Prvd 'M Wrong ran into an error, but cannot associate it with an error message. This is a fallback error type which shouldn't be seen by end users, because it indicates that Prvd 'M Wrong is not reporting errors correctly.</p>"},{"location":"api-reference/errors/#usewasdeprecated","title":"useWasDeprecated","text":"<pre><code>`use()` was deprecated, specify the provider directly instead.\n</code></pre> <p>You attempted to <code>use()</code> another provider in Prvd 'M Wrong 0.2, which deprecates it in favor of specifying the provider as a member.</p>"},{"location":"api-reference/core/","title":"Index","text":"<p>hide:</p> <ul> <li>toc</li> </ul> API Reference"},{"location":"api-reference/core/#core","title":"Core","text":"<p>This package contains fundamental primitives for creating and using game providers. Contains everything needed to bootstrap a Roblox game and utilities for extending the core Prvd 'M Wrong package.</p> <p>Install this through your preferred package manager:</p> WallyPesdeNPMPNPMYarn <pre><code>[dependencies]\n  prvd = \"prvdmwrong/core@0.2.0-dev.5\"\n</code></pre> <pre><code>dependencies:\n- prvd:\n  - name: prvdmwrong/core\n  - version: 0.2.0-dev.5\n</code></pre> <pre><code>$ npm i @prvdmwrong/core\n</code></pre> <pre><code>$ pnpm i @prvdmwrong/core\n</code></pre> <pre><code>$ yarn add @prvdmwrong/core\n</code></pre>"},{"location":"api-reference/core/#providers","title":"Providers","text":"<ul> <li> Provider</li> <li> new</li> <li> StartupStatus</li> <li> preload</li> <li> start</li> <li> awaitStart</li> <li> onStart</li> </ul>"},{"location":"api-reference/core/#types","title":"Types","text":"<ul> <li> Lifecycle</li> <li> OnInit</li> <li> OnStart</li> <li> Options</li> <li> Provider</li> </ul>"},{"location":"api-reference/core/#lifecycles","title":"Lifecycles","text":"<ul> <li> Lifecycle</li> <li> fireConcurrent</li> <li> fireSequential</li> <li> onLifecycleRegistered</li> <li> onLifecycleUnregistered</li> </ul>"},{"location":"api-reference/core/#modding","title":"Modding","text":"<ul> <li> getStartupOptions</li> <li> getStartupStatus</li> <li> onProviderConstructed</li> <li> onProviderUsed</li> </ul>"},{"location":"api-reference/core/#internal","title":"Internal","text":"<ul> <li> defineMetadata</li> <li> deleteMetadata</li> <li> getMetadata</li> <li> registerAll</li> <li> registerDependency</li> <li> registerMethod</li> <li> unregisterMethod</li> </ul>"},{"location":"api-reference/core/internal/","title":"Index","text":"API Reference Core"},{"location":"api-reference/core/internal/#internal","title":"Internal","text":"<p>Lower level primitives for library authors.</p> <p>Beware</p> <p>These are internal APIs are made for library authors. Do not touch this unless you know what you're doing, unless you'd like to be fired.</p>"},{"location":"api-reference/core/internal/#members","title":"Members","text":"<ul> <li> defineMetadata</li> <li> deleteMetadata</li> <li> getMetadata</li> <li> registerAll</li> <li> registerDependency</li> <li> registerMethod</li> <li> unregisterMethod</li> </ul>"},{"location":"api-reference/core/internal/define-metadata/","title":"defineMetadata","text":"API Reference Core Internal function since v0.1"},{"location":"api-reference/core/internal/define-metadata/#definemetadata","title":"defineMetadata","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p> LuauTypeScript <pre><code>function prvd.defineMetadata(\n  object: unknown,\n  key: string,\n  value: unknown,\n): ()\n</code></pre> <pre><code>export const defineMetadata: (\n  object: unknown,\n  key: string,\n  value: unknown,\n) =&gt; void\n</code></pre>"},{"location":"api-reference/core/internal/define-metadata/#parameters","title":"Parameters","text":""},{"location":"api-reference/core/internal/define-metadata/#object-unknown","title":"object <code>: unknown</code>","text":""},{"location":"api-reference/core/internal/define-metadata/#key-string","title":"key <code>: string</code>","text":""},{"location":"api-reference/core/internal/define-metadata/#value-unknown","title":"value <code>: unknown</code>","text":""},{"location":"api-reference/core/internal/delete-metadata/","title":"deleteMetadata","text":"API Reference Core Internal function since v0.1"},{"location":"api-reference/core/internal/delete-metadata/#deletemetadata","title":"deleteMetadata","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p> LuauTypeScript <pre><code>function prvd.deleteMetadata(\n  object: unknown,\n  key: string,\n): ()\n</code></pre> <pre><code>export const deleteMetadata: (\n  object: unknown,\n  key: string,\n) =&gt; void\n</code></pre>"},{"location":"api-reference/core/internal/delete-metadata/#parameters","title":"Parameters","text":""},{"location":"api-reference/core/internal/delete-metadata/#object-unknown","title":"object <code>: unknown</code>","text":""},{"location":"api-reference/core/internal/delete-metadata/#key-string","title":"key <code>: string</code>","text":""},{"location":"api-reference/core/internal/get-metadata/","title":"getMetadata","text":"API Reference Core Internal function since v0.1"},{"location":"api-reference/core/internal/get-metadata/#getmetadata","title":"getMetadata","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p> LuauTypeScript <pre><code>function prvd.getMetadata(\n  object: unknown,\n  key: string,\n): unknown?\n</code></pre> <pre><code>export const getMetadata: &lt;T&gt;(\n  object: unknown,\n  key: string\n) =&gt; T | undefined\nexport const deleteMetadata: (\n  object: unknown,\n  key: string,\n  property?: string,\n) =&gt; void\n</code></pre>"},{"location":"api-reference/core/internal/get-metadata/#parameters","title":"Parameters","text":""},{"location":"api-reference/core/internal/get-metadata/#object-unknown","title":"object <code>: unknown</code>","text":""},{"location":"api-reference/core/internal/get-metadata/#key-string","title":"key <code>: string</code>","text":""},{"location":"api-reference/core/internal/get-metadata/#returns","title":"Returns","text":"<p>The metadata value.</p>"},{"location":"api-reference/core/internal/register-all/","title":"registerAll","text":"API Reference Core Internal function since v0.2"},{"location":"api-reference/core/internal/register-all/#registerall","title":"registerAll","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"api-reference/core/internal/register-dependency/","title":"registerDependency","text":"API Reference Core Internal function since v0.2"},{"location":"api-reference/core/internal/register-dependency/#registerdependency","title":"registerDependency","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"api-reference/core/internal/register-method/","title":"registerMethod","text":"API Reference Core Internal function since v0.2"},{"location":"api-reference/core/internal/register-method/#registermethod","title":"registerMethod","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"api-reference/core/internal/unregister-method/","title":"unregisterMethod","text":"API Reference Core Internal function since v0.2"},{"location":"api-reference/core/internal/unregister-method/#unregistermethod","title":"unregisterMethod","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"api-reference/core/lifecycles/","title":"Index","text":"API Reference Core"},{"location":"api-reference/core/lifecycles/#lifecycles","title":"Lifecycles","text":"<p>Primitives for implementing lifecycle methods and events.</p>"},{"location":"api-reference/core/lifecycles/#members","title":"Members","text":"<ul> <li> Lifecycle \u00b7 Create lifecycle objects</li> <li> fireConcurrent \u00b7 Lifecycle handler   that spawns listeners concurrently</li> <li> fireSequential \u00b7 Lifecycle handler   that runs listeners sequentially</li> <li> onLifecycleRegistered \u00b7   Called when an object registers a lifecycle</li> <li> onLifecycleUnregistered   \u00b7 Called when an object unregisters a lifecycle</li> </ul>"},{"location":"api-reference/core/lifecycles/fire-concurrent/","title":"fireConcurrent","text":"API Reference Core Lifecycles function since v0.2"},{"location":"api-reference/core/lifecycles/fire-concurrent/#fireconcurrent","title":"fireConcurrent","text":"<p>A function that spawns all listeners of a lifecycle asynchronously. Intended to be used as the <code>fire</code> argument of the lifecycle constructor.</p> LuauTypeScript <pre><code>function prvd.fireConcurrent(\n  self: Lifecycle,\n  ...: unknown\n): ()\n</code></pre> <pre><code>export function fireConcurrent: (\n  lifecycle: Lifecycle,\n  ...args: unknown[]\n) =&gt; void\n</code></pre>"},{"location":"api-reference/core/lifecycles/fire-concurrent/#parameters","title":"Parameters","text":""},{"location":"api-reference/core/lifecycles/fire-concurrent/#self-lifecycle","title":"self <code>: Lifecycle</code>","text":"<p>The lifecycle object that should have its listeners ran.</p>"},{"location":"api-reference/core/lifecycles/fire-concurrent/#unknown","title":"... <code>: unknown</code>","text":"<p>Arguments to call the listeners' method.</p>"},{"location":"api-reference/core/lifecycles/fire-concurrent/#learn-more","title":"Learn More","text":"<ul> <li>Lifecycles tutorial</li> </ul>"},{"location":"api-reference/core/lifecycles/fire-sequential/","title":"fireSequential","text":"API Reference Core Lifecycles function since v0.2"},{"location":"api-reference/core/lifecycles/fire-sequential/#firesequential","title":"fireSequential","text":"<p>A function that runs all listeners of a lifecycle in order synchronously. Intended to be used as the <code>fire</code> argument of the lifecycle constructor.</p> LuauTypeScript <pre><code>function prvd.fireSequential(\n  self: Lifecycle,\n  ...: unknown\n): ()\n</code></pre> <pre><code>export function fireSequential: (\n  lifecycle: Lifecycle,\n  ...args: unknown[]\n) =&gt; void\n</code></pre>"},{"location":"api-reference/core/lifecycles/fire-sequential/#parameters","title":"Parameters","text":""},{"location":"api-reference/core/lifecycles/fire-sequential/#self-lifecycle","title":"self <code>: Lifecycle</code>","text":"<p>The lifecycle object that should have its listeners ran.</p>"},{"location":"api-reference/core/lifecycles/fire-sequential/#unknown","title":"... <code>: unknown</code>","text":"<p>Arguments to call the listeners' method.</p>"},{"location":"api-reference/core/lifecycles/fire-sequential/#learn-more","title":"Learn More","text":"<ul> <li>Lifecycles tutorial</li> </ul>"},{"location":"api-reference/core/lifecycles/lifecycle/","title":"Lifecycle","text":"API Reference Core Lifecycles constructor since v0.2"},{"location":"api-reference/core/lifecycles/lifecycle/#lifecycle","title":"Lifecycle","text":"<p>Constructs and returns a new lifecycle within Prvd 'M Wrong. Lifecycles are special event dispatchers that can hook onto a provider's method.</p> LuauTypeScript <pre><code>function prvd.Lifecycle(\n  method: string,\n  fire: (self: Lifecycle, ...unknown) -&gt; ()\n): Lifecycle\n</code></pre> <pre><code>export function Lifecycle: (\n  method: string,\n  fire: (lifecycle: Lifecycle, ...args: unknown[]) =&gt; void\n) =&gt; Lifecycle\n</code></pre>"},{"location":"api-reference/core/lifecycles/lifecycle/#parameters","title":"Parameters","text":""},{"location":"api-reference/core/lifecycles/lifecycle/#method-string","title":"method <code>: string</code>","text":"<p>The provider method that this lifecycle should hook onto. During startup, Oh My Prvd will register all lifecycles on a provider.</p>"},{"location":"api-reference/core/lifecycles/lifecycle/#fire-self-lifecycle-unknown-","title":"fire <code>: (self: Lifecycle, ...unknown) -&gt; ()</code>","text":"<p>A method to fire the lifecycle method. It receives itself and the arguments passed to it. For convenience, Prvd 'M Wrong provides two methods you can use:</p> <ul> <li><code>fireConcurrent(self, ...)</code> which spawns all listeners   concurrently</li> <li><code>fireSequential(self, ...)</code> which runs all listeners   sequentially</li> </ul>"},{"location":"api-reference/core/lifecycles/lifecycle/#returns","title":"Returns","text":"<p>A freshly constructed lifecycle.</p>"},{"location":"api-reference/core/lifecycles/lifecycle/#learn-more","title":"Learn More","text":"<ul> <li>Lifecycles tutorial</li> </ul>"},{"location":"api-reference/core/lifecycles/on-lifecycle-registered/","title":"onLifecycleRegistered","text":"API Reference Core Lifecycles hook since v0.1"},{"location":"api-reference/core/lifecycles/on-lifecycle-registered/#onlifecycleregistered","title":"onLifecycleRegistered","text":"<p>Called when an object registers a lifecycle method. Handlers are expected to be infallible and non-yielding. The handler receives the constructed provider.</p> LuauTypeScript <pre><code>function prvd.onLifecycleRegistered(\n  method: string,\n  handler: (Provider&lt;unknown&gt;) -&gt; ()\n): ()\n</code></pre> <pre><code>export const onLifecycleRegistered: (\n  method: string,\n  handler: (provider: Provider&lt;unknown&gt;) =&gt; void\n) =&gt; void\n</code></pre>"},{"location":"api-reference/core/lifecycles/on-lifecycle-registered/#parameters","title":"Parameters","text":""},{"location":"api-reference/core/lifecycles/on-lifecycle-registered/#method-string","title":"method <code>: string</code>","text":"<p>The method that is registered. During startup, all providers will have its lifecycles registered.</p>"},{"location":"api-reference/core/lifecycles/on-lifecycle-registered/#handler-providerunknown-void","title":"handler <code>: (Provider&lt;unknown&gt;) -&gt; void</code>","text":"<p>A handler for providers that register the specified method. It receives the provider which implements the method.</p>"},{"location":"api-reference/core/lifecycles/on-lifecycle-unregistered/","title":"onLifecycleUnregistered","text":"API Reference Core Lifecycles hook since v0.1"},{"location":"api-reference/core/lifecycles/on-lifecycle-unregistered/#onlifecycleunregistered","title":"onLifecycleUnregistered","text":"<p>Called when an object unregisters a lifecycle method. Handlers are expected to be infallible and non-yielding. The handler receives the constructed provider.</p> LuauTypeScript <pre><code>function prvd.onLifecycleUnregistered(\n  method: string,\n  handler: (Provider&lt;unknown&gt;) -&gt; ()\n): ()\n</code></pre> <pre><code>export const onLifecycleUnregistered: (\n  method: string,\n  handler: (provider: Provider&lt;unknown&gt;) =&gt; void\n) =&gt; void\n</code></pre>"},{"location":"api-reference/core/lifecycles/on-lifecycle-unregistered/#parameters","title":"Parameters","text":""},{"location":"api-reference/core/lifecycles/on-lifecycle-unregistered/#method-string","title":"method <code>: string</code>","text":"<p>The method that is unregistered.</p>"},{"location":"api-reference/core/lifecycles/on-lifecycle-unregistered/#handler-providerunknown-void","title":"handler <code>: (Provider&lt;unknown&gt;) -&gt; void</code>","text":"<p>A handler for providers that unregisters the specified method. It receives the provider which unregistered the method.</p>"},{"location":"api-reference/core/modding/","title":"Index","text":"API Reference Core"},{"location":"api-reference/core/modding/#modding","title":"Modding","text":"<p>Hooks and utilities for extending the core Prvd 'M Wrong package.</p> <p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"api-reference/core/modding/get-startup-options/","title":"getStartupOptions","text":"API Reference Core Modding function since v0.1"},{"location":"api-reference/core/modding/get-startup-options/#getignitionoptions","title":"getIgnitionOptions","text":"<p>Returns the startup configuration options. Options are reconciled with default values.</p> LuauTypeScript <pre><code>function prvd.getIgnitionOptions(): Options\n</code></pre> <pre><code>export const getIgnitionOptions: () =&gt; Options\n</code></pre>"},{"location":"api-reference/core/modding/get-startup-options/#returns","title":"Returns","text":"<p>The startup options, reconciled with default values.</p>"},{"location":"api-reference/core/modding/get-startup-status/","title":"getStartupStatus","text":"API Reference Core Modding"},{"location":"api-reference/core/modding/get-startup-status/#getstartupstatus","title":"getStartupStatus","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"api-reference/core/modding/on-provider-constructed/","title":"onProviderConstructed","text":"API Reference Core Modding hook since v0.1"},{"location":"api-reference/core/modding/on-provider-constructed/#onproviderconstructed","title":"onProviderConstructed","text":"<p>Called just before Prvd 'M Wrong returns a newly constructed provider. Handlers are expected to be infallible and non-yielding. The handler receives the constructed provider.</p> LuauTypeScript <pre><code>function prvd.onProviderConstructed(\n  handler: (Provider&lt;unknown&gt;) -&gt; ()\n) -&gt; (),\n</code></pre> <pre><code>export const onProviderConstructed: (\n  handler: (provider: Provider&lt;object&gt;) =&gt; void,\n) =&gt; void\n</code></pre>"},{"location":"api-reference/core/modding/on-provider-constructed/#parameters","title":"Parameters","text":""},{"location":"api-reference/core/modding/on-provider-constructed/#handler-providerunknown-void","title":"handler <code>: (Provider&lt;unknown&gt;) -&gt; void</code>","text":"<p>A handler that is called just before a newly constructed provider is returned. It receives the provider.</p>"},{"location":"api-reference/core/modding/on-provider-used/","title":"onProviderUsed","text":"API Reference Core Modding hook since v0.1"},{"location":"api-reference/core/modding/on-provider-used/#onproviderused","title":"onProviderUsed","text":"<p>Called just before Prvd 'M Wrong returns a used provider. Handlers are expected to be infallible and non-yielding. The handler receives the used provider.</p> LuauTypeScript <pre><code>function prvd.onProviderUsed(\n  handler: (Provider&lt;unknown&gt;) -&gt; ()\n) -&gt; (),\n</code></pre> <pre><code>export const onProviderUsed: (\n  handler: (provider: Provider&lt;object&gt;) =&gt; void,\n) =&gt; void\n</code></pre>"},{"location":"api-reference/core/modding/on-provider-used/#parameters","title":"Parameters","text":""},{"location":"api-reference/core/modding/on-provider-used/#handler-providerunknown-void","title":"handler <code>: (Provider&lt;unknown&gt;) -&gt; void</code>","text":"<p>A handler that is called when a provider has been used. It receives the target provider.</p>"},{"location":"api-reference/core/providers/","title":"Index","text":"API Reference Core"},{"location":"api-reference/core/providers/#providers","title":"Providers","text":"<p>Fundamental primitives for creating and using game providers.</p>"},{"location":"api-reference/core/providers/#members","title":"Members","text":"<ul> <li> Provider \u00b7 Construct TypeScript providers   within Oh My Prvd</li> <li> new \u00b7 Construct Luau providers within Oh   My Prvd</li> <li> StartupStatus \u00b7 All startup   phases Prvd 'M Wrong will be in</li> <li> preload \u00b7 Preload an array of ModuleScripts</li> <li> start \u00b7 Starts Prvd 'M Wrong</li> <li> awaitStart \u00b7 Yields until startup   finishes</li> <li> onStart \u00b7 Spawned when startup finishes</li> </ul>"},{"location":"api-reference/core/providers/await-start/","title":"awaitStart","text":"API Reference Core Providers hook since v0.1"},{"location":"api-reference/core/providers/await-start/#awaitstart","title":"awaitStart","text":"<p>Yields the calling thread just before startup finishes. If Prvd 'M Wrong has already started, the thread will continue.</p> LuauTypeScript <pre><code>function prvd.awaitStart(): ()\n</code></pre> <pre><code>export const awaitStart: () =&gt; void\n</code></pre>"},{"location":"api-reference/core/providers/await-start/#learn-more","title":"Learn More","text":"<ul> <li>startup tutorial</li> </ul>"},{"location":"api-reference/core/providers/new/","title":"new","text":"API Reference Core Providers constructor since v0.1"},{"location":"api-reference/core/providers/new/#new","title":"new","text":"Luau <p>Constructs and returns a new Luau provider within Prvd 'M Wrong. Providers must be created before calling <code>prvd.start(options)</code>.</p> <pre><code>function prvd.new&lt;T&gt;(\n  provider: T\n): Provider&lt;T&gt;\n</code></pre> <p>Shorthand syntax</p> <p>It's recommended to call the package as a shorthand for <code>prvd.new</code>:</p> <pre><code>local prvd = -- Import Prvd 'M Wrong however you'd like!\nlocal MyProvider = {}\nreturn prvd(MyProvider)\n</code></pre> <p>Beware the difference</p> <p>Both <code>prvd.new</code> and <code>@Provider()</code> appeal for different environments. <code>prvd.new()</code> is used as a function to construct Luau providers. Contrast to <code>@Provider()</code>, which is used as a class decorator to construct TypeScript decorators.</p>"},{"location":"api-reference/core/providers/new/#parameters","title":"Parameters","text":""},{"location":"api-reference/core/providers/new/#provider-t","title":"provider <code>: T</code>","text":"<p>The methods and properties of the provider. All lifecycle methods will be registered during startup. The provider can specify a <code>name</code> property for debug profiling, and falls back to using <code>debug.info</code>. The provider may also specify a <code>loadOrder</code> property which dictates when the provider is loaded, and defaults to one.</p>"},{"location":"api-reference/core/providers/new/#returns-providert","title":"Returns <code>: Provider&lt;T&gt;</code>","text":"<p>A freshly registered provider.</p>"},{"location":"api-reference/core/providers/new/#learn-more","title":"Learn More","text":"<ul> <li>Providers tutorial</li> </ul>"},{"location":"api-reference/core/providers/on-start/","title":"onStart","text":"API Reference Core Providers workflow since v0.1"},{"location":"api-reference/core/providers/on-start/#onstart","title":"onStart","text":"<p>Queues a callback to be called just before startup finishes. If Prvd 'M Wrong has already started, the callback will be spawned immediately.</p> LuauTypeScript <pre><code>function prvd.onStart(\n  callback: () -&gt; ()\n): ()\n</code></pre> <pre><code>export const onStart: (\n  callback: () =&gt; void\n) =&gt; void\n</code></pre>"},{"location":"api-reference/core/providers/on-start/#parameters","title":"Parameters","text":""},{"location":"api-reference/core/providers/on-start/#callback-","title":"callback <code>: () -&gt; ()</code>","text":"<p>The callback to be spawned just before startup finishes.</p>"},{"location":"api-reference/core/providers/on-start/#learn-more","title":"Learn More","text":"<ul> <li>startup tutorial</li> </ul>"},{"location":"api-reference/core/providers/preload/","title":"preload","text":"API Reference Core Providers function since v0.1"},{"location":"api-reference/core/providers/preload/#preload","title":"preload","text":"<p>Preload the specified parent by requiring all <code>ModuleScripts</code> within it. An optional <code>predicate</code> function can be provided to filter modules.</p> LuauTypeScript <pre><code>function prvd.loadChildren(\n  parent: { Instance },\n  predicate: ((ModuleScript) -&gt; boolean)?\n): { unknown }\n</code></pre> <pre><code>export const preload: (\n  parent: Instance[],\n  predicate?: (module: ModuleScript) =&gt; boolean\n) =&gt; unknown[]\n</code></pre>"},{"location":"api-reference/core/providers/preload/#parameters","title":"Parameters","text":""},{"location":"api-reference/core/providers/preload/#parent-instance","title":"parent <code>: { Instance }</code>","text":"<p>An array of instances to load from. Often paired with <code>:GetChildren()</code> or <code>:GetDescendants()</code>.</p>"},{"location":"api-reference/core/providers/preload/#predicate-modulescript-boolean","title":"predicate <code>: (ModuleScript) -&gt; boolean</code>","text":"<p>An optional predicate function that will be called to filter the modules to load with.</p>"},{"location":"api-reference/core/providers/preload/#learn-more","title":"Learn More","text":"<ul> <li>Startup tutorial</li> </ul>"},{"location":"api-reference/core/providers/provider/","title":"Provider","text":"API Reference Core Providers constructor since v0.1"},{"location":"api-reference/core/providers/provider/#provider","title":"Provider","text":"<p>Returns a decorator that when applied to a TypeScript class registers it as a provider within Prvd 'M Wrong. Providers must be created before calling <code>prvd.start(options)</code>.</p> TypeScript <pre><code>export const Provider: (\n  options?: {\n    loadOrder?: number\n  }\n) =&gt; &lt;T extends new () =&gt; InstanceType&lt;T&gt;&gt;(\n  provider: T\n) =&gt; void\n</code></pre> <p>Name is inferred</p> <p>Prvd 'M Wrong will infer the name of the class provider for memory profiling.</p> <p>Beware the difference</p> <p>Both <code>prvd.new</code> and <code>@Provider()</code> appeal for different environments. <code>prvd.new()</code> is used as a function to construct Luau providers. Contrast to <code>@Provider()</code>, which is used as a class decorator to construct TypeScript decorators.</p>"},{"location":"api-reference/core/providers/provider/#parameters","title":"Parameters","text":""},{"location":"api-reference/core/providers/provider/#options-loadorder-number","title":"options <code>: { loadOrder?: number }</code>","text":"<p>Additional options that will be applied onto the provider. It is recommended to specify <code>loadOrder</code> through this argument.</p>"},{"location":"api-reference/core/providers/provider/#returns-t-extends-new-instancetypetprovider-t-void","title":"Returns <code>: &lt;T extends new () =&gt; InstanceType&lt;T&gt;&gt;(provider: T) =&gt; void</code>","text":"<p>A decorator that when used on a TypeScript class registers a freshly constructed provider.</p>"},{"location":"api-reference/core/providers/provider/#learn-more","title":"Learn More","text":"<ul> <li>Providers tutorial</li> </ul>"},{"location":"api-reference/core/providers/start/","title":"start","text":"API Reference Core Providers function since v0.1"},{"location":"api-reference/core/providers/start/#start","title":"start","text":"<p>Starts Prvd 'M Wrong. Expected to be called once in an environment, e.g. once on the server and once on the client.</p> <p>All necessary providers should be preloaded before calling this as newly created providers will not run its lifecycle events.</p> LuauTypeScript <pre><code>function prvd.start(\n  options: {\n    logLevel: \"none\" | \"verbose\" | nil,\n    profiling: boolean?,\n  }?\n): ()\n</code></pre> <pre><code>export const start: (\n  options: Partial&lt;Options&gt; = {\n    logLevel: \"none\",\n    profiling: RunService.IsStudio(),\n  }\n) =&gt; void\n</code></pre>"},{"location":"api-reference/core/providers/start/#parameters","title":"Parameters","text":""},{"location":"api-reference/core/providers/start/#options-partialoptions","title":"options <code>: Partial&lt;Options&gt;</code>","text":"<p>Configures how Prvd 'M Wrong will start. The following are the available configuration options:</p> <ul> <li><code>logLevel: \"none\" | \"verbose\"</code> configures if Prvd 'M Wrong should log trace   information to the console, defaults to none.</li> <li><code>profiling: boolean</code> configures if built-in lifecycle events should be   profiled with <code>debug.setmemorycategory</code> and <code>debug.profilebegin</code>, defaults to   whether the current session is running in Roblox Studio.</li> </ul>"},{"location":"api-reference/core/providers/start/#learn-more","title":"Learn More","text":"<ul> <li>startup tutorial</li> </ul>"},{"location":"api-reference/core/providers/startup-status/","title":"StartupStatus","text":"API Reference Core Providers enumeration since v0.1"},{"location":"api-reference/core/providers/startup-status/#startupstatus","title":"StartupStatus","text":"<p>An enumeration of all defined startup status Prvd 'M Wrong will be in.</p> <p>This enum is not useful outside of Prvd 'M Wrong itself; prefer to work with <code>awaitStart()</code> and <code>onStart(callback)</code></p> LuauTypeScript <pre><code>prvd.StartupStatus = {\n  Pending = \"IgnitionStatus.Pending\",\n  startup = \"IgnitionStatus.startup\",\n  Ignited = \"IgnitionStatus.Ignited\"\n}\n</code></pre> <pre><code>export enum StartupStatus {\n  Pending = \"IgnitionStatus.Pending\",\n  startup = \"IgnitionStatus.startup\",\n  Ignited = \"IgnitionStatus.Ignited\"\n}\n</code></pre>"},{"location":"api-reference/core/providers/startup-status/#items","title":"Items","text":""},{"location":"api-reference/core/providers/startup-status/#pending-startupstatuspending","title":"Pending <code>: StartupStatus.Pending</code>","text":"<p>Indicates that <code>prvd.start()</code> has not been called yet. Creating a provider is safe.</p>"},{"location":"api-reference/core/providers/startup-status/#startup-startupstatusstartup","title":"startup <code>: StartupStatus.startup</code>","text":"<p>Indicates that <code>prvd.start()</code> has been called, but the startup process has not finished. Attempting to create a provider will throw an error.</p>"},{"location":"api-reference/core/providers/startup-status/#ignited-startupstatusignited","title":"Ignited <code>: StartupStatus.Ignited</code>","text":"<p>Indicates that the startup process has finished. Attempting to create a provider will throw an error.</p> <p>Awaiting threads from <code>prvd.awaitStart()</code> and queued callbacks from <code>prvd.onStart()</code> will be spawned just before the startup status is set to this.</p>"},{"location":"api-reference/core/types/","title":"Index","text":"API Reference Core"},{"location":"api-reference/core/types/#types","title":"Types","text":"<p>Types exported by the core Prvd 'M Wrong package.</p> <ul> <li> Lifecycle</li> <li> OnInit</li> <li> OnStart</li> <li> Options</li> <li> Provider</li> </ul>"},{"location":"api-reference/core/types/lifecycle/","title":"Lifecycle","text":"Prvd 'M Wrong Core Types type since v0.2"},{"location":"api-reference/core/types/lifecycle/#lifecycle","title":"Lifecycle","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"api-reference/core/types/on-init/","title":"OnInit","text":"Prvd 'M Wrong Core Types type since v0.2"},{"location":"api-reference/core/types/on-init/#oninit","title":"OnInit","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"api-reference/core/types/on-start/","title":"OnStart","text":"Prvd 'M Wrong Core Types type since v0.2"},{"location":"api-reference/core/types/on-start/#onstart","title":"OnStart","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"api-reference/core/types/options/","title":"Options","text":"Prvd 'M Wrong Core type since v0.1"},{"location":"api-reference/core/types/options/#options","title":"Options","text":"<p>Configures how Prvd 'M Wrong will ignite. The following are the available configuration options: This type is not useful outside of Prvd 'M Wrong itself; prefer to specify startup options as a parameter of <code>start(options)</code>.</p> LuauTypeScript <pre><code>export type Options = {\n  logLevel: \"none\" | \"verbose\",\n  profiling: boolean\n}\n</code></pre> <pre><code>export interface Options {\n  logLevel: \"none\" | \"verbose\"\n  profiling: boolean\n}\n</code></pre>"},{"location":"api-reference/core/types/options/#members","title":"Members","text":""},{"location":"api-reference/core/types/options/#loglevel-none-verbose","title":"logLevel <code>: \"none\" | \"verbose\"</code>","text":"<p>Configures if Prvd 'M Wrong should log trace information to the console, defaults to <code>\"none\"</code>.</p>"},{"location":"api-reference/core/types/options/#profiling-boolean","title":"profiling <code>: boolean</code>","text":"<p>Configures if built-in lifecycle events should be profiled with <code>debug.setmemorycategory</code> and <code>debug.profilebegin</code>, defaults to whether the current session is running in Roblox Studio.</p>"},{"location":"api-reference/core/types/options/#learn-more","title":"Learn More","text":"<ul> <li>startup tutorial</li> </ul>"},{"location":"api-reference/core/types/provider/","title":"Provider","text":"Prvd 'M Wrong Core type since v0.1"},{"location":"api-reference/core/types/provider/#provider","title":"Provider","text":"<p>Provides a specific functionality for a game. This type is not useful outside of Prvd 'M Wrong itself; prefer to import providers directly for more precise types.</p> LuauTypeScript <pre><code>export type Provider&lt;T&gt; = T &amp; {\n  loadOrder: number?,\n  onInit: ((self: Provider&lt;T&gt;) -&gt; Promise?)?,\n  onStart: (self: Provider&lt;T&gt;) -&gt; ()?\n}\n</code></pre> <pre><code>export type Provider&lt;T extends object&gt; = T &amp; {\n  loadOrder?: number,\n  onInit?(): void | Promise&lt;void&gt;,\n  onStart?(): void\n}\n</code></pre>"},{"location":"api-reference/core/types/provider/#members","title":"Members","text":""},{"location":"api-reference/core/types/provider/#loadorder-number","title":"loadOrder <code>: number</code>","text":"<p>Determines when to initialize the provider. Defaults to one. This member is not generally useful, as Prvd 'M Wrong will figure out a load order with dependency injection.</p>"},{"location":"api-reference/core/types/provider/#oninit-self-providert-promise","title":"onInit <code>: (self: Provider&lt;T&gt;) -&gt; Promise?</code>","text":"<p>Runs sequentially before any other lifecycle methods, methods are expected to be infallible and preferably non-yielding.</p> <p>If it returns a promise, Prvd 'M Wrong will await for the promise to resolve.</p>"},{"location":"api-reference/core/types/provider/#onstart-self-providert-","title":"onStart <code>: (self: Provider&lt;T&gt;) -&gt; ()</code>","text":"<p>Runs concurrently after all other lifecycle methods have been registered. This means failures and yields do not affect other providers.</p>"},{"location":"api-reference/core/types/provider/#learn-more","title":"Learn More","text":"<ul> <li>Providers tutorial</li> </ul>"},{"location":"api-reference/lifecycles/players/","title":"Index","text":"API Reference Lifecycles"},{"location":"api-reference/lifecycles/players/#players","title":"Players","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"api-reference/lifecycles/players/on-player-added/","title":"OnPlayerAdded","text":"API Reference Lifecycles Players"},{"location":"api-reference/lifecycles/players/on-player-added/#onplayeradded","title":"onPlayerAdded","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"api-reference/lifecycles/players/on-player-removed/","title":"OnPlayerRemoved","text":"API Reference Lifecycles Players"},{"location":"api-reference/lifecycles/players/on-player-removed/#onplayerremoved","title":"onPlayerRemoved","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"api-reference/lifecycles/runtime/","title":"Index","text":"API Reference Runtime"},{"location":"api-reference/lifecycles/runtime/#runtime","title":"Runtime","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"api-reference/lifecycles/runtime/on-post-simulation/","title":"OnPostSimulation","text":"API Reference Lifecycles Runtime"},{"location":"api-reference/lifecycles/runtime/on-post-simulation/#onplayeradded","title":"onPlayerAdded","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"api-reference/lifecycles/runtime/on-pre-render/","title":"OnPreRender","text":"API Reference Lifecycles Runtime"},{"location":"api-reference/lifecycles/runtime/on-pre-render/#onprerender","title":"onPreRender","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"api-reference/lifecycles/runtime/on-pre-simulation/","title":"OnPreSimulation","text":"API Reference Lifecycles Runtime"},{"location":"api-reference/lifecycles/runtime/on-pre-simulation/#onpresimulation","title":"onPreSimulation","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"api-reference/lifecycles/runtime/on-shutdown/","title":"OnShutdown","text":"API Reference Lifecycles Runtime"},{"location":"api-reference/lifecycles/runtime/on-shutdown/#onshutdown","title":"onShutdown","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"api-reference/lumin-compat/","title":"Index","text":"Lumin Compat available as <code>@prvdmwrong/lumin-compat</code> <p>This package provides a compatibility layer between Lumin Framework and Prvd 'M Wrong. It preserves controller types, worker APIs and promise-based startup.</p> <p>Like other compatibility packages, this package can be used as a drop-in replacement for Lumin Framework. Just change where you require the original framework, and let Prvd 'M Wrong do the heavy lifting.</p>"},{"location":"api-reference/lumin-compat/#framework","title":"Framework","text":"<ul> <li>Controller</li> <li>Expect</li> <li>Signal</li> <li>Start</li> <li>Started</li> <li>Worker</li> </ul>"},{"location":"api-reference/lumin-compat/#types","title":"Types","text":"<ul> <li>Storage</li> <li>WorkerType</li> <li>Worker</li> </ul>"},{"location":"api-reference/lumin-compat/framework/controller/","title":"Controller","text":"Controller available since <code>0.2</code> <p>Constructs and returns a new provider given a Lumin Framework controller. The <code>name</code> field is preserved as the provider's identifier.</p> LuauTypeScript <pre><code>function Controller&lt;Members&gt;(\n  name: string,\n  members: Members\n): prvd.Provider&lt;Members&gt;\n</code></pre> <pre><code>export const Controller: &lt;Members&gt;(\n  name: string,\n  members: Members\n) =&gt; prvd.Provider&lt;Members&gt;\n</code></pre>"},{"location":"api-reference/lumin-compat/framework/controller/#parameters","title":"Parameters","text":""},{"location":"api-reference/lumin-compat/framework/controller/#name-string","title":"name <code>: string</code>","text":"<p>The identifier to be used for the provider.</p>"},{"location":"api-reference/lumin-compat/framework/controller/#members-members","title":"members <code>: Members</code>","text":"<p>The members of this provider.</p>"},{"location":"api-reference/lumin-compat/framework/controller/#returns","title":"Returns","text":"<p>A newly constructed provider preserving the following:</p> <ul> <li>the <code>name</code> field of the constructor is used as the identifier</li> <li>the <code>Init</code> method is mapped to <code>onInit</code></li> <li>the <code>Start</code> method is mapped to <code>onStart</code></li> </ul>"},{"location":"api-reference/lumin-compat/framework/expect/","title":"Expect","text":"Expect available since <code>0.2</code> <p>As Prvd 'M Wrong does not follow Lumin Framework's expectation model, this function simply returns the given controller.</p> LuauTypeScript <pre><code>function Controller&lt;T&gt;(\n  controller: Provider&lt;T&gt;\n): Provider&lt;T&gt;\n</code></pre> <pre><code>export const Controller: &lt;T extends object&gt;(\n  controller: Provider&lt;T&gt;\n) =&gt; Provider&lt;T&gt;\n</code></pre>"},{"location":"api-reference/lumin-compat/framework/expect/#parameters","title":"Parameters","text":""},{"location":"api-reference/lumin-compat/framework/expect/#controller-providert","title":"controller <code>: Provider&lt;T&gt;</code>","text":"<p>The controller to be expected.</p>"},{"location":"api-reference/lumin-compat/framework/expect/#returns","title":"Returns","text":"<p>The given controller.</p>"},{"location":"api-reference/lumin-compat/framework/signal/","title":"Signal","text":"Signal available since <code>0.2</code> LuauTypeScript <pre><code>function Signal(\n  name: string?\n): Signal&lt;...any&gt;\n</code></pre> <pre><code>export const Signal: &lt;Args extends unknown[] = unknown[]&gt;(\n  name?: string\n) =&gt; Signal&lt;Args&gt;\n</code></pre>"},{"location":"api-reference/lumin-compat/framework/start/","title":"Start","text":"Start available since <code>0.2</code> LuauTypeScript <pre><code>function Start(\n  modules: { Instance }?\n): Promise&lt;()&gt;\n</code></pre> <pre><code>export const Start: (\n  modules?: Instance[]\n) =&gt; Promise&lt;void&gt;\n</code></pre>"},{"location":"api-reference/lumin-compat/framework/started/","title":"Started","text":"Started available since <code>0.2</code> LuauTypeScript <pre><code>lumin.Started: boolean\n</code></pre> <pre><code>export let Started: boolean\n</code></pre>"},{"location":"api-reference/lumin-compat/framework/worker/","title":"Worker","text":"Worker available since <code>0.2</code> LuauTypeScript <pre><code>function Worker(\n  type: WorkerType,\n  callback: (...any) -&gt; ()\n): Worker\n</code></pre> <pre><code>export interface Worker&lt;Type extends WorkerType = any&gt; {\n  Type: Type\n  Callback(...args: InferWorkerArgs&lt;Type&gt;): void\n  IsWorker: boolean\n}\n</code></pre>"},{"location":"api-reference/lumin-compat/types/storage/","title":"Storage","text":"Storage available since <code>0.2</code> <p>This type has no meaningful use for Prvd 'm Wrong. It's sole purpose is to humiliate Lumin Labs and prove 'm wrong. It is only included for completeness.</p> LuauTypeScript <pre><code>export type Storage = {\n  Controllers: { any },\n  ExpectedControllers: { any },\n  Workers: { [string]: { [string]: { Worker } } },\n  Nodes: {\n    Signals: { [string]: Signal.Signal&lt;...any&gt; },\n  },\n}\n</code></pre> <pre><code>export interface Storage {\n  Controllers: Controller&lt;never&gt;[]\n  ExpectedControllers: Controller&lt;never&gt;[]\n  Workers: Map&lt;string, Map&lt;string, Worker[]&gt;&gt;\n  Nodes: {\n    Signals: Map&lt;string, Signal&lt;any[]&gt;&gt;\n  }\n}\n</code></pre>"},{"location":"api-reference/lumin-compat/types/worker-type/","title":"WorkerType","text":"WorkerType available since <code>0.2</code> LuauTypeScript <pre><code>export type WorkerType =\n  \"PostSimulation\"\n  | \"PreSimulation\"\n  | \"PreAnimation\"\n  | \"PreRender\"\n  | \"PlayerAdded\"\n  | \"PlayerRemoving\"\n</code></pre> <pre><code>export type WorkerType =\n  | \"PostSimulation\"\n  | \"PreSimulation\"\n  | \"PreAnimation\"\n  | \"PreRender\"\n  | \"PlayerAdded\"\n  | \"PlayerRemoving\"\n</code></pre>"},{"location":"api-reference/lumin-compat/types/worker/","title":"Worker","text":"Worker available since <code>0.2</code> LuauTypeScript <pre><code>export type Worker = {\n  Type: WorkerType,\n  Callback: (...any) -&gt; (),\n  IsWorker: boolean,\n}\n</code></pre> <pre><code>export const Worker: &lt;Type extends WorkerType = WorkerType&gt;(\n  type: Type,\n  callback: (...args: InferWorkerArgs&lt;Type&gt;) =&gt; void,\n) =&gt; Worker&lt;Type&gt;\n</code></pre>"},{"location":"examples/","title":"Projects","text":"<p>Here, you can find various open-source projects to see Prvd 'M Wrong used in a real setting, accompanied by in-depth explanations that shows the ropes of the library.</p> since v0.2 uses TypeScript"},{"location":"examples/#prvd-m-wrong-microgames","title":"Prvd 'M Wrong Microgames","text":"<p>See how Prvd 'M Wrong can be used to build a microgame, decked with server validation, a round provider, a shop provider and more.</p> <p>Unreleased</p> <p>The Prvd 'M Wrong Microgames example is unreleased.</p> since v0.1 uses Luau"},{"location":"examples/#prvd-m-wrong-obby","title":"Prvd 'M Wrong Obby","text":"<p>See how Prvd 'M Wrong can be used to build a simple obby, decked with a JToH-esque client objects provider, a checkpoints provider, a networking provider, and a debug provider.</p> <p> Read the explanation Play on Roblox Source code on GitHub</p>"},{"location":"examples/obby/","title":"Prvd 'M Wrong Obby","text":"since v0.1 uses Luau"},{"location":"examples/obby/#prvd-m-wrong-obby","title":"Prvd 'M Wrong Obby","text":"<p>See how Prvd 'M Wrong can be used to build a simple obby, decked with a JToH-esque client objects provider, a checkpoints provider, a networking provider, and a debug provider.</p> <p> Play on Roblox Source code on GitHub</p>"},{"location":"examples/obby/#explanation","title":"Explanation","text":"<p>This game serves as a feature complete example of the core Prvd 'M Wrong package. It serves as motivation for creating other games using the core package, utilizing a partially managed Rojo configuration to leverage Roblox Studio as a visual representation and external editors for code editing.</p> <p>Some games, for example obbies, might contain lots of different client objects, e.g. spinners, damage bricks, and jump pads to name a few.</p> <p>Some of these client objects can be done with basic constraints, e.g. a spinner can be made with a CylindricalConstraint and some attachments, while a damage brick would need a remote event to damage the player.</p> <p>For more complex client objects, it would be ergonomic to use ModuleScripts and run it with a corresponding client object, which perhaps will have the CollectionService \"Objects\" tag and a \"Script\" string attribute to specify the ObjectScript to use. Let's call these <code>ObjectScript</code>s, which will satisfy this type:</p> <pre><code>export type ObjectScript = {\n  type: \"ObjectScript\",\n  runner: (\n    self: ObjectScript,\n    object: Instance,\n    scope: { unknown }\n  ) -&gt; (),\n}\n</code></pre> <p>The <code>ObjectScript</code> interface will use a table for future extensions, such as specifying it's own type guards, or enable some feature flags.</p> <p>Note the <code>ObjectScript:runner(object, scope)</code> method, which receives both the target object and a scope, which will be cleaned up once the client object unloads.</p> <p>Let's create <code>ObjectProvider</code>s for the server and the client. During startup, the server <code>ObjectProvider</code> moves objects from the workspace to the ServerStorage. This then uses the <code>NetProvider</code> and connects to the <code>GetObjects</code> remote, using the <code>PlayerProvider</code> to validate if a player has client objects. If not, the <code>ObjectProvider</code> sends a clone of the client objects to the player.</p> <p>The players <code>ObjectProvider</code> will wait for the client objects to appear as a child of the player. Then, every object with the CollectionService tag \"Objects\" and a \"Script\" string attribute gets processed, with a corresponding <code>ObjectScript</code>. It will prepare a runner thread, link the object and its script to it, and then enables it.</p> <p>Checkpoints are kept separate from client objects to be tracked by the <code>PlayerProvider</code>s alongside with session info. The <code>PlayerProvider</code> tracks all players and assigns each some <code>PlayerSession</code> information, which satisfies this type:</p> <pre><code>export type PlayerSession = {\n  checkpoint: number,\n  hasObjects: boolean,\n\n  startedAt: number,\n  leaderstats: Folder &amp; {\n    Stage: IntValue,\n    Time: IntValue,\n  },\n}\n</code></pre> <p>The <code>PlayerProvider</code> increments a player <code>PlayerSession.checkpoint</code> once the player touches the next consecutive checkpoint. This also uses the <code>NetProvider</code> to fire the <code>NextCheckpoint</code> event, which is picked up by the players <code>GuiProvider</code> to create some confetti.</p> <p>The <code>ObjectsProvider</code> sets a player <code>PlayerSession.hasObjects</code> to true once it sends the client objects to prevent a player from firing the <code>GetObjects</code> event several times.</p> <p>Finally, the <code>PlayerProvider</code> sets a players <code>PlayerSession.startedAt</code> to <code>os.clock()</code> as soon as the player joined, and increments a players <code>PlayerSession.leaderstats</code> until the player reached the final checkpoint.</p> <p>This game uses some other providers too:</p> <ul> <li>The <code>DebugProvider</code> copies all Tools from its StudioTools folder if the   current session is running on Roblox Studio. It comes with a Noclip tool to   help ease playtesting the obby.</li> <li>The <code>GuiProvider</code> manages the games user interface using Fusion 0.3. Notably,   this provider tracks the <code>NextCheckpoint</code> event to increment a value based on   the players current checkpoint. It then observes that for firing confetti or   toggling a win message.</li> <li>The <code>NetProvider</code> wraps around RemoteEvents and eases using them. It serves as   a replacement for the planned <code>prvdmwrong-net</code> package, which has not been   released. Other providers will use the <code>t</code> package to typecheck remote data.</li> </ul>"},{"location":"examples/swordfight/","title":"Prvd 'M Wrong Swordfight","text":"since v0.2 uses TypeScript"},{"location":"examples/swordfight/#prvd-m-wrong-swordfight","title":"Prvd 'M Wrong Swordfight","text":"<p>See how Prvd 'M Wrong can be used to build a swordfighting game, decked with server validation, a round provider, a combat provider and more.</p> <p>Unreleased</p> <p>The Prvd 'M Wrong Swordfight example is unreleased.</p>"},{"location":"extras/","title":"Extras","text":"<p>Welcome to the Extras! It's a wealth of resources surrounding Prvd 'M Wrong. Explore open-source projects using Prvd 'M Wrong, download brand assets, and more.</p>"},{"location":"extras/#commonly-used","title":"Commonly Used","text":"<ul> <li> <p> Backgrounds</p> <p>Download high quality backgrounds designed for Prvd 'M Wrong, optimized for various resolutions.</p> </li> <li> <p> Projects</p> <p>Find various open-source projects to see Prvd 'M Wrong used in a real setting, accompanied by in-depth explanations that shows the ropes of the library.</p> </li> </ul>"},{"location":"extras/branding/","title":"Branding","text":"<p>Life's too short to be boring. Prvd 'M Wrong brand is playful and creative, but we're keen to keep things high quality. If you use our work, please make it tasteful and send it to us for approval.</p> <p>All assets are considered open-source contributions and should be used according to open standards and licensing rules.</p>"},{"location":"extras/branding/#logo","title":"Logo","text":"<p>Please do not edit, change, distort, recolor, or reconfigure the Prvd 'M Wrong logo.</p> <p></p>"},{"location":"extras/branding/#colors","title":"Colors","text":"<p>The Prvd 'M Wrong brand colors, derived from Oklch, are used in the logo and most illustrations. They might not be suitable for text or all backgrounds.</p> <p>Sunglass Orange</p> <p> #D15500  LCH 0.6 0.186 52.985 </p> <p>Summer Gold</p> <p> #E26600  LCH 0.65 0.186 52.985 </p> <p>Subzero White</p> <p> #BAE7F5  LCH 0.9 0.05 220 </p> <p>Abyss Black</p> <p> #001B25  LCH 0.2 0.05 220 </p> <p>s</p>"},{"location":"extras/branding/swag/","title":"Swag","text":""},{"location":"extras/branding/swag/#badges","title":"Badges","text":"<p>Show the world your repository uses Prvd 'M Wrong! Again, your game will become your money back:</p> <p> </p> <pre><code>[![Made with Prvd 'M Wrong](https://img.shields.io/badge/Made_With-Prvd_'M_Wrong-D15500?logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMwSURBVHgB7ZqBddsgEIZ%2FdQJngpIJkmygTFBvUHeCZoPYEzSdIM0EbSeIMkHUCUQ2UCcgdwZsPVmRQEK2bPO9dw8%2FCQwcd3CAgEgkEolEIpHIeZIgIEqplJLvJJzOzOOcpCSRJG%2Fmd27eySRJZKX8zJRjuSa5Mqmw%2BU3Zn9VyB4caLkie1X75gSlADbkmKdRhKEgEBjDIBUzlz9ia6CGQJLd9XWKoAgoctvOWnBRwgx58Qk%2Bo8%2FeYRucZdsMletDLAozpF5geN2QJuU%2BBvhZwj2nivTJ4W8CER9%2FCE2LmmrmPBaSYNnOfzH0sYCoz%2F0dwpHlJVlC6ZPayAKVDXYFpw2H0wjWzrwt4mdcB%2BeKa0csFyAJeoTcnx8CFixs4W4DSO7Vj6TyzcMnk4wIpjovUJdOOC5iRTqEnuyuTsth9%2BrHA5p9Bt7k0wucRWTVOWCvAdHoBPXmkOH0kyS9SxCqhzrNf%2F8b0l7cxWCtg6oHNmJQ8CR6TX4dmrYAVzpcnOwkuoLe4AucDnyzfbZZBs81dknyFniUzkv%2Fmtz3Wtthlpb40zmryGdsl1CeIsvXltTbU5SNEpT0C2yU9NeVW1PkHzhD0XqCNSiQp0GxptlPZWGf%2BZpDLaoicdBSwIyng5h7SpOsRdN2SerShanEC7e3YWErbMVlTJCgoeYQerRArhMTWnF%2Bw605VrIVUb4RCrVIc%2BHyrP2xSwBw6MDpFLuvu1bQZGmy2E0U2zS07CjAbhVOLDSTJrU%2BBdWygxqMguVP6UpUvNR7UeBSq7%2F0hFVyqcUj3WFdr%2FNG1DHLhVwSG3Kxp8k2hL1pDwkvgRVuGrhMhifDkns%2FHqGtDqwJMICMRlrc91vWvK4PLmeALwpK1vAttBcMswPVPPGn7v9DKnpwCZMfFZds7X0qXq%2FJOBZgGh4oOM7TXxQ0OpXAna3K9F%2FiLMDw55AlV1x%2BEgtdoNZxHx7pmKsxXZwIhUcO%2BAyx8GqSGK3yJ0CgdtxfKn0L1GA0qM1f96vOKJn1vhwX0uRrfIAnsHlhIk%2FJExgEP%2B2He92SoUh%2BH5FfYnggJk8We%2Bmzq8%2Fk8JhKJRCKRSCRyzrwDOoDn2zSYOy8AAAAASUVORK5CYII%3D)\n](https://github.com/prvdmwrong/prvdmwrong)\n[![Prvd 'M Wrong](https://img.shields.io/badge/Prvd_'M_Wrong-white?logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAu6SURBVHgB7Vpfa11ZFf%2BtfZK0A0JvEESFIbcPCgNCM34ASfwCrW%2FDvNiCgvgyHfG97SAqKEz7oIgvbV9En9r5BKafwBSRIiK5AXEem%2FgwDE1ylmuvP3vvc5ub3CRlXuauNrnnnrPP2uv%2Fvx1gAQtYwAIWsIAFLGABX04gvEH4%2B3vYYKYPuOcNwTzKyIlpm4E9JJowYzdR%2FxK09Bw4lH%2BYvPtnTOL9v93ACJcxWkkYHR1gHZSugVk%2BeQwWTMCufGwvJzx4p3nvIvBGBPDiPYwPmR4CwnigFG5BgZ71f%2F2utxjKE6FZRLNJkuXyQsaa3yXiB9%2F5Cz7EBeHCAvjH%2B1jnnp4IojU2FoiMW8DZVl4H27HJJz8iXyg3aEpA%2BWv%2BMFmSYUsw4UK%2F73TE37%2BINVxIAFnzQuVfhZyxEVkIM8Yyn0UgsZ2tIX0mT5nYHxGK4Nr1KPjI8cVNfz5Jl3jznUfnE0LCBaBX5nmclZOpS%2FJLr5NZe0q6ASdhV59lAyEyT0hMSV%2FKn%2Fa%2Batk%2BueDKvCc248g4yf2JTFBqea%2FoCc4J5xbAP99Pd7qEtS4ZQ8oY4NdcrFmEQZlJ1WByHqmGg84ZNYZZCVJUSZeodMjVTx5Vk9xL8Y4J8NoLoQfngHO5wIubGOMAO%2BaXpjGLS9SYKDAw2XCL48ACAsI1enV%2F0iBZ%2FN%2Fdou7RhBd7zIn5u9%2F%2BE7ZxBjiXBXRH6U4x22T7ZzMPV1CzhTFV7hU3MbfIHGRz1rXqFmT33XVUs9l1EgYWppbh7qL7kkre3Yo%2BxhnhzBawI9o%2F6GlnGK%2FMJ1uNq258B80O6v4UIRIRABWFXtvaouHy3YKl3uLq%2B4baE4jK0%2B8k3vzWI2xhTjizBRwcYSO5ZlVjiTXo5evs6xYH2DSV1KazxqhzH9fHqkUqwc38n0x2Hj8ULxyPMy2%2BX7QdUo7rsDBZdv0M7JzdAv59U7Svaa81Af8MK7CCRn3Y3JhpsGXRV5P%2FvVjwdx2Pr4mCiV3zVAoilAKpxpe9Dnz16iOpPueAM1nAv36EjZx2nAjzvxQ%2B6xR5eotsB4%2F8qUT7nBbh1mCpM2IFqGYJteawIJiPWHo1txlkE0%2BlHkNGPfDDeXk6kwCWjnDDN1PTN4JrjWdCoSDeAqQHsBBEpEINmsnWFkF5xViDpv9kV0kUgZZKfaABM9Ikat1AdGNens4kACHie%2BQhv9FoyQZJsbFngoagBI%2FYpVAqTKhFhFWE0FwIaAShMcZCBSKGJMPbKMOVkLAhwXo0D09zCyAjFPzrpgUugScTaVqoJl0066afIqiFRnUhKNYpyhT1DzhwJLMoLmYeFpXXuLAR1qQaqpViWk5zucHcAug6bMCtLSnXmQGO%2BgWtn5dcbs%2BKZszW2ao5ZTQsoMYHFIsOf9CYEnmfPd7YY7cmFCvMgmR1PymnNufh67UssHMbo%2B6zbiP1R%2BO%2BwzXqMe5BY8F5RUhf9ZdKs2NYLHlHRDY2o5qr66IW8E64qf8QecMR%2BGtcukhvqjxrxB6lXvA21Fhg3%2BelXD%2BT9SO53ss%2FzP0u0tLW23843BoIIDO9%2FBluCo7r8u6G5ydfQE2p4789dQ1bWC4jgNLqlidFZlzSXBDqDIaAzBEsAcbIoPSYx%2BAygSLSJqEVZFnM0XezI9sV2h%2B9%2FUfco%2F%2F8GOvU4Yk8GKPU39QWXIWvkEjRfGtJdb0RTlUfLuei9hr6q0bdYpxHt4e6X9VsFWzpAXgwSBm23mZiVHqRdj%2F5dY%2F%2B%2BxMtbNaKBoCq3YrCrvS%2BiTv6EdVkSLs1Bi9fg0BTTS2bnM8BUZWG0u0EOirFkg8QghYaKKgRnF%2BEfQQNtsLvEe8vyd0rIeWWyOQ8JaAoPBmzXopZF%2Bi0tAaAwq2mQIq%2BqBiYGkBWQDJrijVx2XpTrFXmdF1Ri3VLlmU5eK5s%2BMStCXMlvRbeaC9JD%2FlRRFR4VG9zrkZp77%2BbCI1Sy5dc7JHf83fXRvfkVaOnEKp9Qy1sIlN4%2FZA8A8R3ajKM%2F%2FgzrnR5JomoQV6wKamaQqPzzHrJvPEjFc%2BnP8VNuXlHvoyLv2J6lhfhttyI2%2BH5hDYAhmlT1UDxn6Z7cxMHNfs29xo6qNp76z%2BoPUgfLlzec6st9FG4Ho6YH3zz97hdqPv0NsbdAe7IMxGGjLDBW2Kj%2B4J2IkLcO0p15tb18n1Fmo5XMr6WEfYS8pBbNxtJ2hzlelyouNITxqTBFSMhdj34c8Pk2uSgFUq%2B3peLiVC%2BLXeFBpn7JUgaw16fmx3fH7PgUPc0enJ8EzoEveyfaxne63vc%2B%2FrvcL%2Bq4AuAnGq%2FcigTZBPKWnmQnIYjYVCYPOqw9Y37b2bmPw1ZyZ%2BLAK%2Fer8I7UQAvhWh5IWt4bO4xCzph4AjcYbIEtYe8wWT1%2Fnwt6RloGImgRp2UpX1%2FtNbnnqTPpp99XPSt132OSxN5dY%2F952v3Z4%2FJ6JgNx2KuD8XsrmnlN51eq8cOzbbk61pAeSTfycKQaPVc6H0mkhKhXJ4An8u%2Fy%2FIvrhTW%2Byxo2VveX88TZ8EwQtv3Gw3UBiBCE35QA0qlR93q8Vcf4NbpAvgQ18U5nxauqdY4HMmmxMT2ZoNuKtbVSm66YJkOuDWfNgy1wMNNfE%2BK8sDPGah9r5an8vvq6pR7LQGvbbFPNKymohyjiLFe%2FHiFAm7KAL2gmiUaRqgSQm3ZqpJJYUBV3lF90qDCCCqjqkEhlaLQaMhByQREu6sf82Sa3de6QZHQlrx%2Fz3pU1Elv%2FvRc2sztvBPTNZbG25wea70%2B0BqDfFRGpYWlVMXja6wCi1lD7TI5aKEoaqwW8Dqj1gheg0T9wrsigk0cAzOD4P9%2Bps3RQ0xZQuOLNak2En%2FdxAe1vtXtTBOJVw8kaGVXyynzpsSwD1wegylvE3w89ft%2Bpu9h%2F4WwuFoP5BPpvufN1RmZZaYAMuz%2FHHcFyZ0WMWHKP7iafP6Smu5xQHzzyhGwufrb4ei67uUF0FTj0uKIfXqvhmfvJyGX8O7qb2ZngRMHIlLOPvWhA2IwYSG3lqj1oMLLV6AtV30iVE04X08z74Rs2dGYT4DAvq8NYKjB0ZntU%2BfupO5jA9O6n7or7Z3EfIalkx4eHGCycgnWnHhN66VlNGfut8Rxs%2Fb0KoqQB9duD8%2BP2%2BvwENvLK4gYixoUDbE1ZTXdNbJudppq3cGnHpOdaAFeyEx8gFsajxhvuYbtuvNmJNXxVj3QrP8oB6QZe%2BUSvAl6zbGYNVjRBMUgtVieNW%2FGkLeBdlBzvLDnFoAC8TNjIk5xWhP3PFYsIYQS3WSN3E50Xr41ayupJ7dj9G3BzlwiIrozzPXEKVpAlCkx%2FBZsVngxC4AxtJ0ajaNopPH9VCe34ZN10EmNFahfzySqTyJsT63uy94rMLXH49a%2BE5rDkKaFrwpaSacLYOm0BbLvtk1%2Fs58bIbV0i2YUJe3kT5%2FqZF44IoL77u7lX822gKVL2OpfoXi%2FWRRhcOZe0pyX3N4KhyqDLoH9lV%2B%2BAQt469e5MMpTVZ3LexVCYWLtX24gTLcclafQUMkSWyfttXJXrc3dwC3HeIuijGmgZW%2Bt68GLWqEH6GeYA%2BY6F5D49tTnXlSDH6M9wkKT5srxmbtFnBVKTn582l5iNJ9Q837DVDlA1rgAP6BJft%2FcL84aaYkw15%2FNzCUApv6xIW8ONzEITBEXlKB6hhd%2F%2F6PXj976xenn9itLuO%2FZwIx7UAq7VfjRe4zQilAoArHUCst4cxawLITLVlsIZpyAVOpwI1Lnbjyoyd0yMJEW%2Ft48e9HdPPnhWzZzhJ8KeZVHNfgVK4w1qbVOqSrvzjdUOcPRGN%2BSDScltSXPt6VRcul3KINPr8xknMWb8xKUIQtchrU%2FQNnP%2F%2BLM%2F0AC8aMSy7%2BMnkyMfD7rPppP2OX1eYHvYow8VwNdhw0r1mTvUe0RcteVsZJEX57InPATSTPbWas4B8R%2BMiRZF0JlSJJPfCk3T2s%2BoM94ZeqT%2FxyXd2Xd0%2BW78%2F95zAIWsIAFLGABC1jAAr7M8H%2Fo96%2BwcI5bcwAAAABJRU5ErkJggg%3D%3D&amp;labelColor=white&amp;color=D15500)\n](https://github.com/prvdmwrong/prvdmwrong)\n[![Prvd 'M Wrong](https://img.shields.io/badge/Prvd_'M_Wrong-001B25?logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAu6SURBVHgB7Vpfa11ZFf%2BtfZK0A0JvEESFIbcPCgNCM34ASfwCrW%2FDvNiCgvgyHfG97SAqKEz7oIgvbV9En9r5BKafwBSRIiK5AXEem%2FgwDE1ylmuvP3vvc5ub3CRlXuauNrnnnrPP2uv%2Fvx1gAQtYwAIWsIAFLGABX04gvEH4%2B3vYYKYPuOcNwTzKyIlpm4E9JJowYzdR%2FxK09Bw4lH%2BYvPtnTOL9v93ACJcxWkkYHR1gHZSugVk%2BeQwWTMCufGwvJzx4p3nvIvBGBPDiPYwPmR4CwnigFG5BgZ71f%2F2utxjKE6FZRLNJkuXyQsaa3yXiB9%2F5Cz7EBeHCAvjH%2B1jnnp4IojU2FoiMW8DZVl4H27HJJz8iXyg3aEpA%2BWv%2BMFmSYUsw4UK%2F73TE37%2BINVxIAFnzQuVfhZyxEVkIM8Yyn0UgsZ2tIX0mT5nYHxGK4Nr1KPjI8cVNfz5Jl3jznUfnE0LCBaBX5nmclZOpS%2FJLr5NZe0q6ASdhV59lAyEyT0hMSV%2FKn%2Fa%2Batk%2BueDKvCc248g4yf2JTFBqea%2FoCc4J5xbAP99Pd7qEtS4ZQ8oY4NdcrFmEQZlJ1WByHqmGg84ZNYZZCVJUSZeodMjVTx5Vk9xL8Y4J8NoLoQfngHO5wIubGOMAO%2BaXpjGLS9SYKDAw2XCL48ACAsI1enV%2F0iBZ%2FN%2Fdou7RhBd7zIn5u9%2F%2BE7ZxBjiXBXRH6U4x22T7ZzMPV1CzhTFV7hU3MbfIHGRz1rXqFmT33XVUs9l1EgYWppbh7qL7kkre3Yo%2BxhnhzBawI9o%2F6GlnGK%2FMJ1uNq258B80O6v4UIRIRABWFXtvaouHy3YKl3uLq%2B4baE4jK0%2B8k3vzWI2xhTjizBRwcYSO5ZlVjiTXo5evs6xYH2DSV1KazxqhzH9fHqkUqwc38n0x2Hj8ULxyPMy2%2BX7QdUo7rsDBZdv0M7JzdAv59U7Svaa81Af8MK7CCRn3Y3JhpsGXRV5P%2FvVjwdx2Pr4mCiV3zVAoilAKpxpe9Dnz16iOpPueAM1nAv36EjZx2nAjzvxQ%2B6xR5eotsB4%2F8qUT7nBbh1mCpM2IFqGYJteawIJiPWHo1txlkE0%2BlHkNGPfDDeXk6kwCWjnDDN1PTN4JrjWdCoSDeAqQHsBBEpEINmsnWFkF5xViDpv9kV0kUgZZKfaABM9Ikat1AdGNens4kACHie%2BQhv9FoyQZJsbFngoagBI%2FYpVAqTKhFhFWE0FwIaAShMcZCBSKGJMPbKMOVkLAhwXo0D09zCyAjFPzrpgUugScTaVqoJl0066afIqiFRnUhKNYpyhT1DzhwJLMoLmYeFpXXuLAR1qQaqpViWk5zucHcAug6bMCtLSnXmQGO%2BgWtn5dcbs%2BKZszW2ao5ZTQsoMYHFIsOf9CYEnmfPd7YY7cmFCvMgmR1PymnNufh67UssHMbo%2B6zbiP1R%2BO%2BwzXqMe5BY8F5RUhf9ZdKs2NYLHlHRDY2o5qr66IW8E64qf8QecMR%2BGtcukhvqjxrxB6lXvA21Fhg3%2BelXD%2BT9SO53ss%2FzP0u0tLW23843BoIIDO9%2FBluCo7r8u6G5ydfQE2p4789dQ1bWC4jgNLqlidFZlzSXBDqDIaAzBEsAcbIoPSYx%2BAygSLSJqEVZFnM0XezI9sV2h%2B9%2FUfco%2F%2F8GOvU4Yk8GKPU39QWXIWvkEjRfGtJdb0RTlUfLuei9hr6q0bdYpxHt4e6X9VsFWzpAXgwSBm23mZiVHqRdj%2F5dY%2F%2B%2BxMtbNaKBoCq3YrCrvS%2BiTv6EdVkSLs1Bi9fg0BTTS2bnM8BUZWG0u0EOirFkg8QghYaKKgRnF%2BEfQQNtsLvEe8vyd0rIeWWyOQ8JaAoPBmzXopZF%2Bi0tAaAwq2mQIq%2BqBiYGkBWQDJrijVx2XpTrFXmdF1Ri3VLlmU5eK5s%2BMStCXMlvRbeaC9JD%2FlRRFR4VG9zrkZp77%2BbCI1Sy5dc7JHf83fXRvfkVaOnEKp9Qy1sIlN4%2FZA8A8R3ajKM%2F%2FgzrnR5JomoQV6wKamaQqPzzHrJvPEjFc%2BnP8VNuXlHvoyLv2J6lhfhttyI2%2BH5hDYAhmlT1UDxn6Z7cxMHNfs29xo6qNp76z%2BoPUgfLlzec6st9FG4Ho6YH3zz97hdqPv0NsbdAe7IMxGGjLDBW2Kj%2B4J2IkLcO0p15tb18n1Fmo5XMr6WEfYS8pBbNxtJ2hzlelyouNITxqTBFSMhdj34c8Pk2uSgFUq%2B3peLiVC%2BLXeFBpn7JUgaw16fmx3fH7PgUPc0enJ8EzoEveyfaxne63vc%2B%2FrvcL%2Bq4AuAnGq%2FcigTZBPKWnmQnIYjYVCYPOqw9Y37b2bmPw1ZyZ%2BLAK%2Fer8I7UQAvhWh5IWt4bO4xCzph4AjcYbIEtYe8wWT1%2Fnwt6RloGImgRp2UpX1%2FtNbnnqTPpp99XPSt132OSxN5dY%2F952v3Z4%2FJ6JgNx2KuD8XsrmnlN51eq8cOzbbk61pAeSTfycKQaPVc6H0mkhKhXJ4An8u%2Fy%2FIvrhTW%2Byxo2VveX88TZ8EwQtv3Gw3UBiBCE35QA0qlR93q8Vcf4NbpAvgQ18U5nxauqdY4HMmmxMT2ZoNuKtbVSm66YJkOuDWfNgy1wMNNfE%2BK8sDPGah9r5an8vvq6pR7LQGvbbFPNKymohyjiLFe%2FHiFAm7KAL2gmiUaRqgSQm3ZqpJJYUBV3lF90qDCCCqjqkEhlaLQaMhByQREu6sf82Sa3de6QZHQlrx%2Fz3pU1Elv%2FvRc2sztvBPTNZbG25wea70%2B0BqDfFRGpYWlVMXja6wCi1lD7TI5aKEoaqwW8Dqj1gheg0T9wrsigk0cAzOD4P9%2Bps3RQ0xZQuOLNak2En%2FdxAe1vtXtTBOJVw8kaGVXyynzpsSwD1wegylvE3w89ft%2Bpu9h%2F4WwuFoP5BPpvufN1RmZZaYAMuz%2FHHcFyZ0WMWHKP7iafP6Smu5xQHzzyhGwufrb4ei67uUF0FTj0uKIfXqvhmfvJyGX8O7qb2ZngRMHIlLOPvWhA2IwYSG3lqj1oMLLV6AtV30iVE04X08z74Rs2dGYT4DAvq8NYKjB0ZntU%2BfupO5jA9O6n7or7Z3EfIalkx4eHGCycgnWnHhN66VlNGfut8Rxs%2Fb0KoqQB9duD8%2BP2%2BvwENvLK4gYixoUDbE1ZTXdNbJudppq3cGnHpOdaAFeyEx8gFsajxhvuYbtuvNmJNXxVj3QrP8oB6QZe%2BUSvAl6zbGYNVjRBMUgtVieNW%2FGkLeBdlBzvLDnFoAC8TNjIk5xWhP3PFYsIYQS3WSN3E50Xr41ayupJ7dj9G3BzlwiIrozzPXEKVpAlCkx%2FBZsVngxC4AxtJ0ajaNopPH9VCe34ZN10EmNFahfzySqTyJsT63uy94rMLXH49a%2BE5rDkKaFrwpaSacLYOm0BbLvtk1%2Fs58bIbV0i2YUJe3kT5%2FqZF44IoL77u7lX822gKVL2OpfoXi%2FWRRhcOZe0pyX3N4KhyqDLoH9lV%2B%2BAQt469e5MMpTVZ3LexVCYWLtX24gTLcclafQUMkSWyfttXJXrc3dwC3HeIuijGmgZW%2Bt68GLWqEH6GeYA%2BY6F5D49tTnXlSDH6M9wkKT5srxmbtFnBVKTn582l5iNJ9Q837DVDlA1rgAP6BJft%2FcL84aaYkw15%2FNzCUApv6xIW8ONzEITBEXlKB6hhd%2F%2F6PXj976xenn9itLuO%2FZwIx7UAq7VfjRe4zQilAoArHUCst4cxawLITLVlsIZpyAVOpwI1Lnbjyoyd0yMJEW%2Ft48e9HdPPnhWzZzhJ8KeZVHNfgVK4w1qbVOqSrvzjdUOcPRGN%2BSDScltSXPt6VRcul3KINPr8xknMWb8xKUIQtchrU%2FQNnP%2F%2BLM%2F0AC8aMSy7%2BMnkyMfD7rPppP2OX1eYHvYow8VwNdhw0r1mTvUe0RcteVsZJEX57InPATSTPbWas4B8R%2BMiRZF0JlSJJPfCk3T2s%2BoM94ZeqT%2FxyXd2Xd0%2BW78%2F95zAIWsIAFLGABC1jAAr7M8H%2Fo96%2BwcI5bcwAAAABJRU5ErkJggg%3D%3D)\n](https://github.com/prvdmwrong/prvdmwrong)\n</code></pre>"},{"location":"extras/branding/backgrounds/","title":"Backgrounds","text":"<p>Download high quality backgrounds designed for Prvd 'M Wrong, optimized for these resolutions:</p> <ul> <li>Ultrawide (7680 x 1440)</li> <li>Widescreen (2560 x 1440)</li> </ul> <p>These backgrounds are copyrighted by Team Fireworks and are intended for personal use only. You may not use these backgrounds for commercial use or distribution without explicit written consent.</p>"},{"location":"extras/branding/backgrounds/#machinery","title":"Machinery","text":"<p>Detailed, sprawling illustration of Prvd 'M Wrong's underground machinery. Packed with clues and references to packages and libraries. Designed for seamless horizontal tiling. Not suitable for OLED screens.</p> <p></p> <p> Download Ultrawide  Download Widescreen</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Congratulations on choosing Prvd 'M Wrong as your framework \u2014 you\u2019re finally making good decisions!</p> <p>Here, you will learn how to build great games with Prvd 'M Wrong, even if you're a complete newcomer to the framework.</p> <p>But first, something important...</p> <p> DO NOT USE PRVD 'M WRONG IN PRODUCTION. PRVD 'M WRONG IS UNFINISHED. </p> <p>Prvd 'M Wrong is still under development. Unless you're really, really, really, REALLY, REALLY willing and able to withstand large, sweeping changes, as well bugfix and patch Prvd 'M Wrong itself, do not use Prvd 'M Wrong in production. Yes, that was five-reallys important.</p> <p>You will encounter:</p> <ul> <li>nonexistent or half-baked packages</li> <li>broken features that must be patched/fixed yourself</li> <li>changes in how things work between versions</li> <li>updates that completely remove existing features</li> <li>evolving recommendations on conventions and project structure</li> </ul> <p>This is not a bad thing! It means we can quickly abandon counterproductive ideas and features, and build a solid foundation for the future.</p> <p>Don't be discouraged though, feel free to follow along with our development and try using the library in your own time. We hope you enjoy using Prvd 'M Wrong!</p>"},{"location":"tutorials/#expectations","title":"Expectations","text":"<p>These tutorials assume:</p> <ul> <li>That you're comfortable with Roblox and the Luau scripting language.<ul> <li>These tutorials are not an introduction to Luau \u2013 If you'd like to learn,     see the Roblox creator documentation.</li> </ul> </li> <li>That - if you're using Roblox TypeScript - you're comfortable with TypeScript.<ul> <li>These tutorials are not an introduction to TypeScript - If you'd like     to learn, see Roblox TypeScript's documentation     and the TypeScript handbook</li> <li>These tutorials also assume you're familiar with Luau, which especially     is important when troubleshooting bugs \u2013 If you'd like to learn, see the     Roblox creator documentation.</li> </ul> </li> </ul> <p>Some tutorials might challenge you more than others. Remember, Prvd 'M Wrong is built with you in mind, but it may still take a bit of time to absorb some concepts. Take your time and explore at your own pace.</p>"},{"location":"tutorials/#support","title":"Support","text":"<p>Should you be struggling to understand a concept, or need help debugging an error, here are some resources which can help.</p>"},{"location":"tutorials/#support-with-errors","title":"Support with Errors","text":"<p>Prvd 'M Wrong attaches an ID with every log message, linking to the API Reference's Errors page.</p> <pre><code>[Prvd 'M Wrong]: Cannot register other providers after startup.\n  ID: registerAfterStartup\n  More info: prvdmwrong.github.io/prvdmwrong/latest/api-reference/general/errors#registerafterignition\n</code></pre> <p>It explains the meaning of each message, its origin within Prvd 'M Wrong, and relevant context. When you run into an error, that page is a great place to start!</p>"},{"location":"tutorials/#additional-support","title":"Additional Support","text":"<p>Prvd 'M Wrong is built with you in mind and our documentation aims to be as useful and comprehensive as possible. However, you might need specific advice on an issue, perhaps you may want to learn Prvd 'M Wrong through other means, or you caught a showstopper bug.</p> <p>Whatever you're looking for, feel free to swing by our dedicated thread over the Roblox OSS Discord server. Maintainers drop in frequently alongside eager Prvd 'M Wrong users.</p>"},{"location":"tutorials/installation/","title":"Installation","text":"<p>Prvd 'M Wrong is distributed as several packages, which you will need to install into your game. For Luau, either use a pre-built Roblox model, download from Wally, or download from Pesde. For TypeScript, use the NPM package. Otherwise, download from source.</p>"},{"location":"tutorials/installation/#from-templates","title":"From Templates","text":"<p>Prvd 'M Wrong has batteries-included templates for both Luau and Roblox TypeScript under the <code>@prvdmwrong/templates</code> repository.</p> <ol> <li> <p>On the web, head over to the <code>prvdmwrong/templates</code>     repository. and click the \"Code\"     dropdown, then click \"Download ZIP\". Inside is a copy of the templates     repository:</p> <p></p> <p>Alternatively, in a terminal, run the following command:</p> <pre><code>git clone https://github.com/prvdmwrong/templates.git\ncd templates\n</code></pre> </li> <li> <p>Use one of the following templates inside the repository:</p> <ul> <li> <p>For Luau projects:</p> <ul> <li> <p>Use the <code>luau-barebones</code> template   for a pre-configured barebones prelude.</p> </li> <li> <p>Use the <code>luau-comprehensive</code> template   for a comprehensive prelude including Darklua string requires, Wally   with types, and plenty of goodies.</p> </li> </ul> </li> <li> <p>For Roblox TypeScript projects:</p> <ul> <li> <p>Use the <code>rbxts-barebones</code> template   for a pre-configured barebones prelude.</p> </li> <li> <p>Use the <code>rbxts-comprehensive</code> template   for a comprehensive prelude including ESLint and Prettier   pre-configured.</p> </li> </ul> </li> </ul> </li> </ol>"},{"location":"tutorials/installation/#from-wally","title":"From Wally","text":"<p>For Luau projects synchronizing external files to Roblox Studio, Prvd 'M Wrong can be installed as Wally packages under the <code>@prvdmwrong</code> scope.</p> <ol> <li> <p>Visit one of the desired packages:</p> <ul> <li><code>@prvdmwrong/core</code></li> <li><code>@prvdmwrong/lifecycles</code></li> <li><code>@prvdmwrong/knit-compat</code></li> <li><code>@prvdmwrong/lumin-compat</code></li> <li><code>@prvdmwrong/sapphire-compat</code></li> </ul> </li> <li> <p>Copy the metadata below \"Install\", and append it below your <code>[dependencies]</code>      in your <code>wally.toml</code> configuration:</p> <pre><code>[dependencies]\nprvd = \"prvdmwrong/core@0.2.0-dev.15\"\n</code></pre> </li> <li> <p>Install your packages:</p> <pre><code>wally install\n</code></pre> </li> </ol> <p>Now, Prvd 'M Wrong will be installed under the\u00a0<code>Packages</code>\u00a0directory, which can be required:</p> <pre><code>-- Tweak this depending on where the packages are\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal prvd = require(ReplicatedStorage.Packages.prvd)\n</code></pre> <p>If you'd want the linker modules to also export types, use the Wally Package Types tool:</p> <pre><code>wally-package-types --sourcemap sourcemap.json Packages/\n</code></pre>"},{"location":"tutorials/installation/#from-pesde","title":"From Pesde","text":"<p>For Luau projects synchronizing external files to Roblox Studio, Prvd 'M Wrong can be installed as Pesde packages under the <code>@prvdmwrong</code> scope.</p> <ol> <li> <p>Visit the Pesde registry and search    <code>prvdmwrong</code> to find a desired package.</p> </li> <li> <p>Install the desired package:</p> <pre><code>pesde add prvdmwrong/lifecycles@0.2.0-dev.8\n</code></pre> </li> </ol> <p>Now, Prvd 'M Wrong will be installed under the\u00a0<code>packages</code>\u00a0directory, which can be required:</p> <pre><code>-- Tweak this depending on where the packages are\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal prvd = require(ReplicatedStorage.packages.prvd)\n</code></pre>"},{"location":"tutorials/installation/#from-roblox","title":"From Roblox","text":"<p>For projects exclusive to Roblox Studio, Prvd 'M Wrong can be installed as Roblox models.</p> <ol> <li> <p>Visit the releases page    to find a desired package.</p> </li> <li> <p>Click the \"Assets\" dropdown to view the downloadable files:</p> <p></p> </li> <li> <p>Click on the package you would like to import, which should end in <code>.rbxm</code>:</p> <p></p> </li> <li> <p>Open Roblox Studio to import the model. If you are just following the     tutorials, just an empty baseplate will do.</p> </li> <li> <p>Right-click on <code>ReplicatedStorage</code>, and select \"Insert from File\":</p> <p></p> </li> </ol> <p>Now, a new ModuleScript should appear under ReplicatedStorage, which can be required:</p> <pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal prvd = require(ReplicatedStorage[\"prvdmwrong-core\"])\n</code></pre>"},{"location":"tutorials/installation/#from-node","title":"From Node","text":"<p>For TypeScript projects that compile using Roblox TypeScript, Prvd 'M Wrong can be installed as Node packages under the <code>@prvdmwrong</code> organization.</p> <ol> <li>Visit the <code>@prvdmwrong</code> NPM organization    to find a desired package.</li> <li> <p>Install the package through the preferred package manager:</p> <pre><code># NPM\nnpm i @prvdmwrong/core\n# PNPM\npnpm i @prvdmwrong/core\n# Yarn\nyarn add @prvdmwrong/core\n</code></pre> </li> <li> <p>Roblox TypeScript does not include Prvd 'M Wrong in the project. Find     <code>node_modules</code> in your project file, it may be nested behind several levels:</p> <pre><code>\"node_modules\": {\n  \"$className\": \"Folder\",\n  \"@rbxts\": {\n    \"$path\": \"node_modules/@rbxts\"\n  }\n}\n</code></pre> <p>Append the <code>@prvdmwrong</code> scope below <code>@rbxts</code>:</p> <pre><code>\"node_modules\": {\n  \"$className\": \"Folder\",\n  \"@rbxts\": {\n    \"$path\": \"node_modules/@rbxts\"\n  },\n  \"@prvdmwrong\": {\n    \"$path\": \"node_modules/@prvdmwrong\"\n  }\n}\n</code></pre> </li> <li> <p>Roblox TypeScript needs Prvd 'M Wrong to be included as a type root. Find    <code>typeRoots</code> in your <code>tsconfig.json</code> file, it may be nested behind several    levels:</p> <pre><code>\"typeRoots\": [\n  \"node_modules/@rbxts\"\n],\n</code></pre> <p>Append <code>node_modules/@prvdmwrong</code> below <code>node_modules/@rbxts</code>:</p> <pre><code>\"typeRoots\": [\n  \"node_modules/@rbxts\",\n  \"node_modules/@prvdmwrong\"\n],\n</code></pre> </li> </ol> <p>Now, Prvd 'M Wrong can imported:</p> <pre><code>import prvd from \"@prvdmwrong/core\"\n</code></pre>"},{"location":"tutorials/installation/#from-source","title":"From Source","text":"<p>For synchronizing external files to Roblox Studio, or for developing the framework itself, Prvd 'M Wrong can be built from source.</p> <ol> <li> <p>Visit the releases\" page    to find a desired package.</p> </li> <li> <p>Click the \"Assets\" dropdown to view the downloadable files:</p> <p></p> </li> <li> <p>Under \"Assets\", download <code>Source code (zip)</code>. Inside is a copy of the Prvd 'M     Wrong GitHub repository:</p> <p></p> </li> <li> <p>Prvd 'M Wrong uses Rokit for tooling,    which must be installed:</p> <pre><code>rokit install\n</code></pre> </li> <li> <p>Run the build script; when prompted, do not publish the packages:</p> <pre><code>lune run build\n\u2714 Select packages to build, or none to build all packages \u00b7 core\n\u2714 Build .rbxm models? \u00b7 yes\n\u2714 Publish these packages to NPM and Wally? \u00b7 no\n</code></pre> </li> </ol> <p>Now, Prvd 'M Wrong distributables can be found under the <code>dist</code> directory, which can be used however you please.</p>"},{"location":"tutorials/installation/#uninstalling-prvd-m-wrong","title":"Uninstalling Prvd 'M Wrong","text":"<p>Prvd 'M Wrong isn't for everyone. We'll miss you, but we want to make this an easy breakup.</p> <ol> <li>Replace every mention of <code>prvd(</code> or <code>prvd.new(</code> with <code>(</code>; if you use a    formatter like Stylua, it will    trim the remaining parentheses for you.</li> <li> <p>Replace Prvd 'M Wrong's startup logic with a vanilla implementation. A    basic replacement might look like below:</p> <pre><code>local providersToLoad = script:GetChildren()\nlocal providers = {}\n\nfor _, provider in providersToLoad do\n  if not provider:IsA(\"ModuleScript\") or not provider.Name:match(\"$Provider\") then\n    continue\n  end\n\n  table.insert(providers, require(provider))\nend\n\nfor _, provider in providers do\n  if typeof(provider.onInit) == \"function\" then\n    provider:onInit()\n  end\nend\n\nfor _, provider in providers do\n  if typeof(provider.onStart) == \"function\" then\n    task.spawn(function()\n      provider:onStart()\n    end)\n  end\nend\n</code></pre> </li> </ol>"},{"location":"tutorials/advanced/execution-order/","title":"Execution Order","text":"<p>Prvd 'M Wrong initializes providers following a predefined execution order outlined below.</p> <p>Libraries that interacts with Prvd 'M Wrong should understand the exact sequence in which providers are initialized, ensuring correct functionality and prevent potential conflicts or unexpected behaviors.</p> <pre><code>flowchart TB\n    providers_created--&gt;start\n    providers_created{{\"`\n        **Providers created**\n        prvd() @Provider()\n    `\"}}\n    subgraph start[\"`\n        **Startup**\n        prvd.start()\n    `\"]\n        use_dependencies[\"`\n            **Dependencies used**\n            prvd.use()\n        `\"]\n        lifecycles_registered[\"`\n            **Lifecycles registered**\n            prvd.Lifecycle()\n        `\"]\n        lifecycles_on_init[\"`\n            **Providers initialized**\n            MyProvider:onInit()\n        `\"]\n        lifecycles_on_start[\"`\n            **Providers started**\n            MyProvider:onStart()\n        `\"]\n        on_start[\"`\n            **Callbacks spawned**\n            prvd.onStart()\n        `\"]\n        await_start[\"`\n            **Threads spawned**\n            prvd.awaitStart()\n        `\"]\n\n        use_dependencies--&gt;lifecycles_registered\n        lifecycles_registered--&gt;lifecycles_on_init\n        lifecycles_on_init--&gt;lifecycles_on_start\n        lifecycles_on_start--&gt;on_start\n        lifecycles_on_start--&gt;await_start\n    end</code></pre>"},{"location":"tutorials/advanced/execution-order/#prior-to-startup","title":"Prior to Startup","text":"<p>Providers are registered through <code>prvd()</code> for Luau and <code>@Provider()</code> for TypeScript. Providers must be created prior to startup, or Prvd 'M Wrong will throw an error.</p> <p>Lifecycle objects must be created prior to startup for providers to register it. It's recommended to register a lifecycle object inside a provider module.</p>"},{"location":"tutorials/advanced/execution-order/#startup","title":"Startup","text":"<p><code>prvd.start()</code> instantiates the startup procedure. After it has been called, no more providers will be registered and existing providers will not register newer lifecycle objects.</p> <p>Prvd 'M Wrong will first resolve all dependencies. Providers with <code>use()</code>d dependencies will have it injected. Prvd 'M Wrong will topologically sort providers so dependents run after dependencies.</p> <p>Afterwards, all providers will register itself to all appropriate lifecycle objects. The initialization and start lifecycles are registered beforehand.</p> <p>Providers that implement the <code>onInit</code> lifecycle will be initialized sequentially based on the topological sort done earlier. <code>onInit</code> methods are expected to never throw, and preferably non-yielding. Use this stage to set up a provider.</p> <p>Once initialization is complete, providers that implement the <code>onStart</code> lifecycle will be started concurrently regardless of order. As all providers have been initialized, it is safe to use other providers. Finally, all callbacks queued with <code>onStart()</code> and all threads from <code>awaitStart()</code> are spawned.</p>"},{"location":"tutorials/advanced/migration/","title":"Migrating to Prvd 'M Wrong","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"tutorials/advanced/migration/#knit","title":"Knit","text":""},{"location":"tutorials/advanced/migration/#lumin-framework","title":"Lumin Framework","text":""},{"location":"tutorials/advanced/migration/#proton","title":"Proton","text":""},{"location":"tutorials/advanced/modding/","title":"Modding","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"tutorials/advanced/philosophies/","title":"Philosophies","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"tutorials/advanced/philosophies/#alternatives","title":"Alternatives","text":"<p>Prvd 'M Wrong is not the first Roblox service provider framework. There are several existing game frameworks for Roblox. Besides Prvd 'M Wrong, you might consider:</p> <ul> <li>Knit by sleitnick</li> <li>Flamework by fireboltofdeath</li> <li>Nevermore by Quenty</li> <li>Proton by sleitnick</li> <li>Pronghorn by Iron Stag Games</li> <li>Lazy Modules by NightLapse Studios</li> <li>Lumin Framework by Lumin Labs</li> </ul> <p>So, why did we make Prvd 'M Wrong?</p> <p>Each of these frameworks solve the same problem in multiple angles. The goal of Prvd 'M Wrong is to take all of the lessons and ideas learned from these projects and build a framework that can solve this problem for good. In addition, all of these frameworks have major drawbacks:</p> <ul> <li>Knit is unmaintained, introduces a hefty level of bloat and has subpar types.   Prvd 'M Wrong backfills what discouraged Knit being dependency resolution and   complete IntelliSense;</li> <li>Flamework requires TypeScript and is tightly coupled with its transformer.   As such, type information is lost during compilation;</li> <li>Nevermore introduces an outrageous level of bloat and also harder to use,   being geared primarily just for Quenty and has zero types;</li> <li>Proton is under development and requires TypeScript, practically unmaintained;</li> <li>Pronghorn does not implement dependency resolution, minimal extensibility and   introduces some bloat;</li> <li>Lazy Modules has subpar syntax, somewhat couples code;</li> <li>Lumin Framework has a controller API that is inspired by Prvd 'M Wrong, to   which Prvd 'M Wrong excels it's implementation, and Lumin only features a   rudimentary dependency resolution API.</li> </ul> <p>Finally:</p> <ul> <li>We think a framework should be distributed as a single module, for decoupling   and extensibility.</li> <li>We think a framework should be designed for both Luau and TypeScript, e.g.   Luau and TypeScript providers can be used simultaneously.</li> <li>We think the conventions promoted by other frameworks (e.g. splitting between   services and controllers) are sub-optimal.</li> <li>We have a good enough understanding of the problem to develop something   robust.</li> <li>We think Prvd 'M Wrong should be able to do more than just connect providers.</li> </ul> <p>This is not to say Prvd 'M Wrong is superior, at least not yet:</p> <ul> <li>Components and networking packages are under development, an external   networking/component library is required with Prvd 'M Wrong</li> <li>We strive to keep Prvd 'M Wrong bug-free, but there are blemishes and   imperfections. Prvd 'M Wrong is not as battle-tested as other frameworks and   should not be used for production games.</li> </ul> <p>Prvd 'M Wrong also acknowledges that developers will not migrate from any of the existing frameworks managers without good reason, it needs to be substantially better and require virtually no effort to migrate. Prvd 'M Wrong solves this by providing compatibility modules for Knit and Lumin Framework.</p>"},{"location":"tutorials/advanced/snippets/","title":"Code Snippets","text":"<p>Prvd 'M Wrong is designed to be featherlight, requiring no transformers, compilers, plugins, or extensions. Instead, you may enjoy code snippets to speed up development within Prvd 'M Wrong.</p> <p>All code snippets showcased are made for Luau and TypeScript and found under <code>.vscode</code> in the Prvd 'M Wrong monorepo.</p> <p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"tutorials/advanced/snippets/#provider","title":"Provider","text":"<p>Constructs and returns a provider that implements the <code>onInit</code> and <code>onStart</code> lifecycles.</p> SnippetOutput <pre><code>// Luau\n\"Provider\": {\n  \"prefix\": \"provider\",\n  \"body\": [\n    \"local ${0:$TM_FILENAME_BASE} = {}\",\n    \"type Self = typeof(${0:$TM_FILENAME_BASE})\",\n    \"\",\n    \"function ${0:$TM_FILENAME_BASE}.onInit(self: Self)\",\n    \"\",\n    \"end\",\n    \"\",\n    \"function ${0:$TM_FILENAME_BASE}.onStart(self: Self)\",\n    \"\",\n    \"end\",\n    \"\",\n    \"return prvd(\\\"${0:$TM_FILENAME_BASE}\\\", ${0:$TM_FILENAME_BASE})\"\n  ],\n  \"description\": \"Create a new Luau provider\"\n}\n</code></pre> <pre><code>// TypeScript\n\"Provider\": {\n  \"prefix\": \"provider\",\n  \"body\": [\n    \"import { Provider, type OnInit, type OnStart } from \\\"@rbxts/prvdmwrong\\\"\",\n    \"\",\n    \"@Provider()\",\n    \"export class ${0:$TM_FILENAME_BASE} implements OnInit, OnStart {\",\n    \"  onInit(): void {\",\n    \"\",\n    \"  }\",\n    \"\",\n    \"  onStart(): void {\",\n    \"\",\n    \"  }\",\n    \"}\"\n  ],\n  \"description\": \"Create a new TypeScript provider\"\n}\n</code></pre> <pre><code>-- Luau\nlocal MyProvider = {}\ntype Self = typeof(MyProvider)\n\nfunction MyProvider.onInit(self: Self)\n\nend\n\nfunction MyProvider.onStart(self: Self)\n\nend\n\nreturn prvd(MyProvider)\n</code></pre> <pre><code>// TypeScript\nimport { Provider, type OnInit, type OnStart } from \"@rbxts/prvdmwrong\"\n\n@Provider()\nexport class MyProvider implements OnInit, OnStart {\n  onInit(): void {\n\n  }\n\n  onStart(): void {\n\n  }\n}\n</code></pre>"},{"location":"tutorials/components/","title":"Components","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"tutorials/components/attributes/","title":"Attributes","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"tutorials/components/inheritance/","title":"Inheritance","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"tutorials/components/usage/","title":"Usage","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"tutorials/fundamentals/lifecycles/","title":"Lifecycles","text":"<p>Prvd 'M Wrong comes with the <code>:onInit()</code> and <code>:onStart()</code> lifecycles. To tailor your needs, custom lifecycles can be implemented or imported.</p>"},{"location":"tutorials/fundamentals/lifecycles/#implement-your-own","title":"Implement Your Own","text":"<p>You can implement your own lifecycle method. For this example, we will create our own <code>:onPlayerAdded(player)</code> lifecycle method through the <code>Lifecycle</code> object.</p> <p>To use <code>Lifecycle</code> in your code, you first need to import it from the core package, so that you can refer to it by name:</p> LuauTypeScript <pre><code>local Lifecycle = prvd.Lifecycle\ntype Lifecycle&lt;Interface&gt; = prvd.Lifecycle&lt;Interface&gt;\n</code></pre> <pre><code>import { Lifecycle, type Lifecycle } from \"@rbxts/prvdmwrong\"\n</code></pre> <p>Let's define an interface that will sastify our lifecycle:</p> LuauTypeScript <pre><code>type OnPlayerAdded = {\n  onPlayerAdded: (self: unknown, Player) -&gt; ()\n}\n</code></pre> <pre><code>interface OnPlayerAdded {\n  onPlayerAdded(player: Player) =&gt; void\n}\n</code></pre> <p>To create a new lifecycle object, call the <code>Lifecycle</code> object and give it a method to track and a method to call when fired. It takes a parameter and a variadic; for the first part of the tutorial, this will be unnamed:</p> LuauTypeScript <pre><code>local playerAdded: Lifecycle&lt;OnPlayerAdded&gt; = Lifecycle(\"onPlayerAdded\", function(_, ...)\n\nend)\n</code></pre> <pre><code>const playerAdded: Lifecycle&lt;OnPlayerAdded&gt; = Lifecycle(\"onPlayerAdded\", (_, _) =&gt; {\n\n})\n</code></pre> <p>To fire the lifecycle, call it's <code>:fire(...)</code> method, and pass arguments to call its lifecycle method with:</p> LuauTypeScript <pre><code>Players.PlayerAdded:Connect(function(newPlayer)\n  playerAdded:fire(newPlayer)\nend)\nfor _, existingPlayer in ipairs(Players:GetPlayers()) do\n  playerAdded:fire(existingPlayer)\nend\n</code></pre> <pre><code>Players.PlayerAdded.Connect((newPlayer) =&gt; {\n  playerAdded.fire(newPlayer)\n})\nfor (const existingPlayer of Players:GetPlayers()) {\n  playerAdded.fire(existingPlayer)\n}\n</code></pre> <p>Under the hood, Prvd 'M Wrong will register all providers that specify an <code>onPlayerAdded</code> method.</p>"},{"location":"tutorials/fundamentals/lifecycles/#firing-the-lifecycle","title":"Firing The Lifecycle","text":"<p>Our lifecycle does nothing when we fire it. The lifecycle constructor passes itself as the first argument, to which you can access it's listeners:</p> LuauTypeScript <pre><code>local playerAdded: Lifecycle&lt;OnPlayerAdded&gt; = Lifecycle(\"onPlayerAdded\", function(self, ...)\n  for _, listener in ipairs(self.listeners) do\n    task.spawn(listener.onPlayerAdded, listener)\n  end\nend)\n</code></pre> <pre><code>const playerAdded: Lifecycle&lt;OnPlayerAdded&gt; = Lifecycle(\"onPlayerAdded\", (lifecycle, _) =&gt; {\n  for (const listener of lifecycle.listeners) {\n    task.spawn(() -&gt; listener.onPlayerAdded)\n  }\n})\n</code></pre> <p>The variadic argument are the arguments passed when the lifecycle is fired. Try asking for a <code>player</code> argument for this handler:</p> LuauTypeScript <pre><code>local playerAdded: Lifecycle&lt;OnPlayerAdded&gt; = Lifecycle(\"onPlayerAdded\", function(self, player)\n  for _, listener in ipairs(self.listeners) do\n    task.spawn(listener.onPlayerAdded, listener, player)\n  end\nend)\n</code></pre> <pre><code>const playerAdded: Lifecycle&lt;OnPlayerAdded&gt; = Lifecycle(\"onPlayerAdded\", (lifecycle, ...args) =&gt; {\n  for (const listener of lifecycle.listeners) {\n    task.spawn(() -&gt; listener.onPlayerAdded(args[0]))\n  }\n})\n</code></pre> <p>Now, when a player joins the game, the lifecycle fires its listeners:</p> LuauTypeScript <pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal prvd = require(ReplicatedStorage.Packages.prvdmwrong)\n\nlocal MyProvider = {}\nfunction MyProvider:onPlayerAdded(player)\n  print(\"Greetings\", player)\nend\n\nreturn prvd.new(\"MyProvider\", MyProvider)\n</code></pre> <pre><code>import { Provider } from \"@rbxts/prvdmwrong\"\nexport const MyProvider = Provider(\"MyProvider\", {\n  onPlayerAdded(player) {\n    print(\"Greetings\", player)\n  }\n})\n</code></pre> <p>The PointsProvider from earlier can be rewritten to use it:</p> LuauTypeScript <pre><code>-- ...\n\nfunction PointsProvider.onStart(self: Self)\n  Players.PlayerRemoving:Connect(function(player)\n    self.points[player] = nil\n  end)\nend\n\nfunction PointsProvider.onPlayerAdded(self: Self, newPlayer: Player)\n  self:setDefaultPoints(newPlayer)\nend\n\n-- ...\n</code></pre> <pre><code>export const PointsProvider = Provider(\"PointsProvider\", {\n  // ...\n  onStart() {\n    Players.PlayerRemoving.Connect((player) =&gt; {\n      this.points.delete(player)\n    })\n  }\n\n  onPlayerAdded(newPlayer: Player) {\n    this.setDefaultPoints(newPlayer)\n  }\n  // ...\n})\n</code></pre>"},{"location":"tutorials/fundamentals/lifecycles/#preset-handlers","title":"Preset Handlers","text":"<p>For convenience, Prvd 'M Wrong exports two handlers you can use while constructing lifecycles.</p> <p>For lifecycles that do not depend on execution order, you can pass <code>fireConcurrent</code> as the <code>fire</code> method. This will spawn all of the lifecycle listeners as threads:</p> LuauTypeScript <pre><code>local fireConcurrent = prvd.fireConcurrent\nlocal playerAdded: Lifecycle&lt;OnPlayerAdded&gt; = Lifecycle(\"onPlayerAdded\", fireConcurrent)\n</code></pre> <pre><code>import { Lifecycle, fireConcurrent } from \"@rbxts/prvdmwrong\"\nconst playerAdded: Lifecycle&lt;OnPlayerAdded&gt; = Lifecycle(\"onPlayerAdded\", fireConcurrent)\n</code></pre> <p>Contrast to <code>fireConcurrent</code>, for lifecycles that do depend on execution order, you can pass <code>fireSequential</code> as the <code>fire</code> method. This will run all of the lifecycle listeners synchronously:</p> LuauTypeScript <pre><code>local fireSequential = prvd.fireSequential\nlocal playerAdded: Lifecycle&lt;OnPlayerAdded&gt; = Lifecycle(\"onPlayerAdded\", fireSequential)\n</code></pre> <pre><code>import { Lifecycle, fireSequential } from \"@rbxts/prvdmwrong\"\nconst playerAdded: Lifecycle&lt;OnPlayerAdded&gt; = Lifecycle(\"onPlayerAdded\", fireSequential)\n</code></pre> <p>Exercise error safety</p> <p><code>fireSequential</code> does not protect itself from errors. If a listener throws an error in its lifecycle method, it will halt further execution.</p> <p>Instead, write a handler that is protected from errors:</p> LuauTypeScript <pre><code>local playerAdded: Lifecycle&lt;OnPlayerAdded&gt; = Lifecycle(\"onPlayerAdded\", function(self, player)\n  for _, listener in ipairs(self.listeners) do\n    local ok, result = pcall(listener.onPlayerAdded, listener, player)\n    if ok == false then\n      warn(listener, \"threw an error!\", result)\n    end\n  end\nend)\n</code></pre> <pre><code>const playerAdded: Lifecycle&lt;OnPlayerAdded&gt; = Lifecycle(\"onPlayerAdded\", (lifecycle, player) =&gt; {\n  for (const listener of lifecycle.listeners) {\n    const [ok, result] = pcall(() =&gt; listener.onPlayerAdded(player))\n    if (ok == false) {\n      warn(listener, \"threw an error!\", result)\n    }\n  }\n})\n</code></pre>"},{"location":"tutorials/fundamentals/lifecycles/#additional-lifecycles","title":"Additional Lifecycles","text":"<p>Creating additional lifecycle methods such as <code>:onPlayerAdded(player)</code> can be a hassle. For this, Prvd 'M Wrong exports additional lifecycle methods through a separate <code>prvdmwrong-lifecycles</code> package, which you will have to install.</p> <p>Once installed, import the package, preferably within your startup script:</p> LuauTypeScript <pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nrequire(ReplicatedStorage.Packages.ohmyprvdLifecycles)\n</code></pre> <pre><code>import \"@rbxts/prvdmwrong-lifecycles\"\n</code></pre> <p>This package exports nothing. Instead, it registers a separate provider that implements a host of lifecycle events during runtime:</p> <ul> <li><code>:onPostSimulation(dt)</code>, <code>:onPreSimulation(dt)</code>, and <code>:onPreRender(dt)</code> lets you   hook onto RunService's runtime events:<ul> <li><code>:onPostSimulation(dt)</code> runs every <code>RunService.PostSimulation</code> and is     optimal for responding to changes in the physics state.</li> <li><code>:onPreSimulation(dt)</code> runs every <code>RunService.PreSimulation</code> and is     optimal for manipulating physics.</li> <li><code>:onPreRender(dt)</code> runs every <code>RunService.PreRender</code>. Notably, this only     runs on the client.</li> </ul> </li> <li><code>:onShutdown</code> hooks onto <code>game:BindToClose</code>, or <code>plugin.Unloading</code> if ran   under a plugin environment. <code>:onShutdown</code> also cleanups built-in lifecycle   methods, preventing memory leaks especially for a plugin. It's great for doing   post-mortem cleanup once the game closes or your plugin is unloaded.</li> <li><code>:onPlayerAdded(player)</code> and <code>:onPlayerRemoving(player)</code> binds to   Players.PlayerAdded and Players.PlayerRemoving respectively, making it ideal   for tracking players.</li> </ul>"},{"location":"tutorials/fundamentals/providers/","title":"Providers","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p> <p>Roblox games are composed of top level service providers, which provide a specific service for the game.</p> <p>Prvd 'M Wrong formalizes the concept of providers as singletons objects that provide some top level logic of a game.</p>"},{"location":"tutorials/fundamentals/providers/#construction","title":"Construction","text":"<p>To create Luau providers, call the <code>prvd</code> constructor. For TypeScript providers, prefer to import and use the <code>Provider</code> class decorator:</p> LuauTypeScript <pre><code>local prvd = -- Import Prvd 'M Wrong however you'd like!\n\nlocal PlayerProvider = {}\n\nreturn prvd(PlayerProvider)\n</code></pre> <pre><code>import { Provider } from \"@prvdmwrong/core\"\n\n@Provider()\nexport class PlayerProvider {}\n</code></pre> <p>For Luau providers, wrap the module return with <code>prvd</code>:</p> <pre><code>return prvd(PlayerProvider)\n</code></pre> <p>Keeping the <code>prvd</code> constructor at the bottom allows Luau to infer the full type of the provider as it gets constructed.</p> <p>Avoid constructing the provider earlier, as Luau will \"seal\" the provider, refusing further changes:</p> <pre><code>-- Don't do this! Luau will \"seal\" the provider, refusing further changes:\nlocal PlayerProvider = prvd({})\n\n-- TypeError: Cannot add property 'players' to table '{ }' &amp; '{| loadOrder: ... |}'\nPlayerProvider.players = {}\n\nreturn PlayerProvider\n</code></pre> <p>Likewise, avoid constructing the whole provider inside the <code>prvd</code> constructor, as Luau fails to provide the type for it-<code>self</code>:</p> <pre><code>-- Don't do this! Luau can't infer the type for it-self:\nreturn prvd {\n  -- Seems good...\n  players = {},\n\n  getPlayers = function(self)\n    -- self is typed as 'a' here... Not useful!\n  end\n}\n</code></pre> <p>Games often track additional player session information, such as when the player joined or the player's leaderstats. Let's define a <code>PlayerInfo</code> type, along with an <code>info</code> field to store each player's session information:</p> LuauTypeScript <pre><code>export type PlayerInfo = {\n  joinedAt: number,\n  coins: number,\n}\n\nlocal PlayerProvider = {}\nPlayerProvider.info = {} :: { [Player]: PlayerInfo }\n</code></pre> <pre><code>export interface PlayerInfo {\n  joinedAt: number,\n  coins: number,\n}\n\n@Provider()\nexport class PlayerProvider {\n  readonly info = new Map&lt;Player, PlayerInfo&gt;()\n}\n</code></pre>"},{"location":"tutorials/fundamentals/providers/#lifecycles","title":"Lifecycles","text":"<p>Providers and can implement lifecycles by having a method that matches its lifecycle method.</p> <p>Prvd 'M Wrong provides two lifecycle events out of the box:</p> <ul> <li><code>onInit</code> runs sequentially before any other lifecycle methods, methods are   expected to be infallible and preferably non-yielding.</li> <li>In contrast, <code>onStart</code> runs concurrently after all other lifecycle methods   have been registered. This means failures and yields do not affect other   providers.</li> </ul> <p>Let's implement the <code>onInit</code> lifecycle to instantiate new session information:</p> LuauTypeScript <pre><code>local Players = game:GetService(\"Players\")\nlocal prvd = -- Import Prvd 'M Wrong however you'd like!\n\nexport type PlayerInfo = {\n  joinedAt: number,\n  coins: number,\n}\n\nlocal PlayerProvider = {}\nPlayerProvider.info = {} :: { [Player]: PlayerInfo }\n\nfunction PlayerProvider.onInit(self: typeof(PlayerProvider))\n  local function onPlayerAdded(newPlayer: Player)\n    self.info[newPlayer] = {\n      joinedAt = os.clock(),\n      coins = 0\n    }\n  end\n\n  Players.PlayerAdded:Connect(onPlayerAdded)\n  for _, existingPlayer in Players:GetPlayers() do\n    onPlayerAdded(existingPlayer)\n  end\nend\n</code></pre> <pre><code>import { Players } from \"@rbxts/services\"\nimport { Provider, type OnInit } from \"@prvdmwrong/core\"\n\nexport interface PlayerInfo {\n  joinedAt: number,\n  coins: number,\n}\n\n@Provider()\nexport class PlayerProvider implements OnInit {\n  readonly info = new Map&lt;Player, PlayerInfo&gt;()\n\n  onInit() {\n    const onPlayerAdded = (newPlayer: Player) =&gt; {\n      this.info.set(newPlayer, {\n        joinedAt: os.clock(),\n        coins: 0\n      })\n    }\n\n    Players.PlayerAdded.Connect(onPlayerAdded)\n    for (const existingPlayer of Players.GetPlayers()) {\n      onPlayerAdded(existingPlayer)\n    }\n  }\n}\n</code></pre> <p>Notice that <code>onInit</code> requires the first argument to be <code>self</code>, which is <code>typeof</code> the <code>PlayerProvider</code>.</p> <p>This allows Luau to provide useful type information. Notice how if we omit the <code>self</code> argument and use a colon <code>:</code> for our method, we lose typings for <code>self</code>:</p> <pre><code>function PlayerProvider:onInit()\n  local function onPlayerAdded(newPlayer: Player)\n    -- self.info is typed as `a` here... not very useful!\n    self.info[newPlayer] = {\n      joinedAt = os.clock(),\n      coins = 0\n    }\n  end\n\n  Players.PlayerAdded:Connect(onPlayerAdded)\n  for _, existingPlayer in Players:GetPlayers() do\n    onPlayerAdded(existingPlayer)\n  end\nend\n</code></pre> <p>Contrast as to if we typed <code>self</code> as a parameter:</p> <pre><code>function PlayerProvider.onInit(self: typeof(PlayerProvider))\n  local function onPlayerAdded(newPlayer: Player)\n    -- self.info is helpfully typed as `{| [Player]: PlayerInfo |}`!\n    self.info[newPlayer] = {\n      joinedAt = os.clock(),\n      coins = 0\n    }\n  end\n\n  Players.PlayerAdded:Connect(onPlayerAdded)\n  for _, existingPlayer in Players:GetPlayers() do\n    onPlayerAdded(existingPlayer)\n  end\nend\n</code></pre> <p><code>typeof(PointsProvider)</code> is not very concise. Let's make a type alias, appropriately named <code>Self</code>:</p> <pre><code>local PlayerProvider = {}\ntype Self = typeof(PlayerProvider)\nPlayerProvider.info = {} :: { [Player]: PlayerInfo }\n</code></pre> <p>We could then easily type <code>self</code> as such:</p> <pre><code>function PlayerProvider.onInit(self: Self)\n</code></pre> <p>Now, methods can use <code>self</code> as a shorthand for the <code>PlayerProvider</code>, while other snippets of code could use our method through one of the following:</p> <pre><code>-- pass self directly as an argument...\nPlayerProvider.someFutureMethod(PlayerProvider, player)\n\n-- ...or let Luau pass self for us!\nPlayerProvider:someFutureMethod(player)\n</code></pre>"},{"location":"tutorials/fundamentals/providers/#why-providers","title":"Why Providers?","text":""},{"location":"tutorials/fundamentals/providers/#the-limitations","title":"The Limitations","text":"<p>ModuleScripts are arguably singletons, being a flat table with fields, methods, and properties.</p> <pre><code>local MathModule = {}\n\nfunction MathModule.add(left: number, right: number)\n  return left + right\nend\n\nreturn MathModule\n</code></pre> <p>However, just modules lacks several quality of life features developers enjoy, including dependency resolution and lifecycles. Consider this timer module below:</p> <pre><code>local RunService = game:GetService(\"RunService\")\nlocal MathModule = require(script.Parent.MathModule)\n\nlocal TimerModule = {}\nTimerModule.elapsedTime = 0\n\nRunService.PostSimulation:Connect(function(dt)\n  MathModule.add(TimerModule.elapsedTime, dt)\nend)\n\nreturn TimerModule\n</code></pre> <p>How does this timer module assert that the math module has finished initializing before it's used? Why does the timer module have to connect onto RunService?</p>"},{"location":"tutorials/fundamentals/startup/","title":"Startup","text":"<p>With your providers defined, its time to start Prvd 'M Wrong.</p>"},{"location":"tutorials/fundamentals/startup/#preloading","title":"Preloading","text":"<p>It's necessary to preload your providers to for Prvd 'M Wrong to pick it up. For convenience, you can use the <code>prvd.preload(instances, predicate)</code> function, which will load all modules given an array of instances:</p> LuauTypeScript <pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal prvd = require(ReplicatedStorage.Packages.prvdmwrong)\n\nprvd.preload(script.Providers:GetChildren())\n</code></pre> <pre><code>import { preload } from \"@rbxts/prvdmwrong\"\npreload(script.Providers.GetChildren())\n</code></pre> <p>You can also pass a predicate function to filter the target modules:</p> LuauTypeScript <pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal prvd = require(ReplicatedStorage.Packages.prvdmwrong)\n\nprvd.preload(\n  script.Providers:GetChildren(),\n  function(module: ModuleScript)\n    return module.Name:find(\"Provider$\") ~= nil\n  end\n)\n</code></pre> <pre><code>import { preload } from \"@rbxts/prvdmwrong\"\npreload(\n  script.Providers.GetChildren(),\n  (module) =&gt; module.Name.find(\"Provider$\") !== undefined\n)\n</code></pre>"},{"location":"tutorials/fundamentals/startup/#startup_1","title":"Startup","text":"<p>Finally, start Prvd 'M Wrong, and you're off to the races:</p> <pre><code>prvd.start()\n</code></pre> <p>If another script requires Prvd 'M Wrong to be ignited, <code>awaitStart()</code> can be used, which will yield until Prvd 'M Wrong is fully ignited:</p> <pre><code>prvd.awaitStart()\n</code></pre> <p>Alternatively, if you need to bind to startup, <code>onStart(callback)</code> can be used, which will spawn the callback when Prvd 'M Wrong has fully ignited:</p> LuauTypeScript <pre><code>prvd.onStart(function()\n  print(\"ignited!\")\nend)\n</code></pre> <pre><code>onStart(() =&gt; {\n  print(\"ignited!\")\n})\n</code></pre>"},{"location":"tutorials/net/","title":"Net","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"tutorials/net/events/","title":"Events","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"tutorials/net/functions/","title":"Functions","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"tutorials/net/middlewares/","title":"Middlewares","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"},{"location":"tutorials/net/namespaces/","title":"Namespaces","text":"<p>Under construction</p> <p>This page is under construction - information may be incomplete or missing.</p>"}]}