{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Scroll down for a tour of Prvd 'M Wrong."},{"location":"#build-better-games","title":"Build better games.","text":"<p> Prvd 'M Wrong is a Roblox framework built with type-safe APIs, dependency resolution, and unparalleled DX so you can build better games. Zero bloat, plugins, or lock-in required. </p> <p>Learn Prvd 'M Wrong  GitHub</p> <p></p>"},{"location":"api-reference/","title":"Index","text":""},{"location":"api-reference/#api-reference","title":"API Reference","text":"<p>This section provides technical documentation about what Prvd 'M Wrong provides. For an introduction to Prvd 'M Wrong, read the Learn section.</p>"},{"location":"api-reference/#type-signatures","title":"Type Signatures","text":"<p>Reference pages include type signatures describing the API member, for example:</p> <pre><code>lifecycle(\n    method: string\n    onFire: (lifecycle: Lifecycle&lt;Args...&gt;, Args...) -&gt; ()\n): Lifecycle&lt;Args...&gt;\n</code></pre> <p>While these type signatures are written to be Luau-like, it is ultimately psuedocode for developers. For accurate and syntactically valid type information, see the source code.</p> <p>!!! note \"Note that documentation for TypeScript along with TypeScript typings are planned.\"</p>"},{"location":"api-reference/#packages","title":"Packages","text":"<p>Prvd 'M Wrong is distributed as an ecosystem of individual packages which can be browsed below:</p> <ul> <li>  core  <p>Core Prvd 'M Wrong functionality including components and networking.</p> </li> <li>  knit-compat  <p>Drop-in Prvd 'M Wrong replacement for games that use Knit.</p> </li> </ul>"},{"location":"api-reference/core/","title":"Index","text":""},{"location":"api-reference/core/#prvd","title":"Prvd","text":"<p>Prvd 'M Wrong is a Roblox game framework built with modern standards delivering type-safe APIs, dependency resolution, and unparalleled DX. Zero bloat, plugins, or lock-in required.</p> <p>This package contains core Prvd 'M Wrong functionality including providers, lifecycles, and game roots along with built-in components and networking.</p> <pre><code>local PlayerProvider = {}\ntype Self = typeof(PlayerProvider)\n\nfunction PlayerProvider.onInit(self: Self)\n    self.playerAdded = prvd.lifecycle(\"onPlayerAdded\", prvd.fireConcurrent)\n\n    local function onPlayerAdded(newPlayer: Player)\n        self.playerAdded:fire(newPlayer)\n    end\n\n    self.conn = Players.PlayerAdded:Connect(onPlayerAdded)\n    for _, existingPlayer in Players:GetPlayers() do\n        onPlayerAdded(newPlayer)\n    end\nend\n\nfunction PlayerProvider.onStop(self: Self)\n    self.playerAdded:destroy()\n    self.conn:Disconnect()\nend\n\nreturn prvd(PlayerProvider)\n</code></pre>        f             Provider          Construct and returns a new provider from a Roblox TypeScript class declaration. Providers *provide* specific functionality in a game.  Intended for use as a class decorator for Roblox TypeScript projects. For Luau projects, consider using prvd instead.           f             fireConcurrent          Spawns all callbacks of a lifecycle asynchronously.           f             fireSequential          Calls all callbacks of a lifecycle sequentially.           f             lifecycle          Constructs and returns a new lifecycle object. Providers with the specified method will be registered.           f             onLifecycleConstructing          Called just before a constructing lifecycle is returned. The listener callback receives the lifecycle that is constructing.  Listener callbacks are expected to be non-yielding and infallible.           f             onLifecycleDestroying          Called just before a lifecycle is destroyed. The listener callback receives the lifecycle that is destroyed.  Listener callbacks are expected to be non-yielding and infallible.           f             onLifecycleRegistered          Called when an object registers a lifecycle method. Listeners are expected to be infallible and non-yielding. The listener receives the callback.           f             onLifecycleUnregistered          Called when an object unregisters a lifecycle method. Listeners are expected to be infallible and non-yielding. The listener receives the callback.           f             onLifecycleUsed          Called when a root uses a lifecycle. The listener callback receives the root along with the used lifecycle           f             onProviderConstructed          Called just before a constructing provider is returned. The listener callback receives the provider that is constructed.  Listener callbacks are expected to be non-yielding and infallible.           f             onProviderUsed          Called when a root uses a provider. The listener callback receives the root along with the used provider           f             onRootConstructed          Called just before a constructing root is returned. The listener callback receives the root that is constructing.  Listener callbacks are expected to be non-yielding and infallible.           f             onRootStarted          Called just before a root finishes starting. The listener callback receives the root that is starting.  Listener callbacks are expected to be non-yielding and infallible.           f             onSubRootUsed          Called when a \"parent\" root uses a \"sub\" root. The listener callback receives the root along with the used provider           f             prvd          Construct and returns a new provider. Providers *provide* specific functionality in a game.  Intended for use as a constructor for Luau projects. For Roblox TypeScript projects, consider using Provider instead.           f             root          Construct and returns a new root. Roots are starting points for Prvd 'M Wrong games where providers can be bootstrapped."},{"location":"api-reference/core/functions/fireconcurrent/","title":"fireConcurrent","text":"function             fireConcurrent           view code      <pre><code>fireConcurrent(\n    lifecycle: Lifecycle&lt;Args...&gt;, \n    ...: Args...\n): ()\n</code></pre> <p>Spawns all callbacks of a lifecycle asynchronously.</p>"},{"location":"api-reference/core/functions/fireconcurrent/#parameters","title":"Parameters","text":"lifecycle: Lifecycle <p>Lifecycle to spawn callbacks with.</p>      ...: Args...    <p>Arguments to call the callbacks with.</p>"},{"location":"api-reference/core/functions/fireconcurrent/#returns","title":"Returns","text":""},{"location":"api-reference/core/functions/firesequential/","title":"fireSequential","text":"function             fireSequential           view code      <pre><code>fireSequential(\n    lifecycle: Lifecycle&lt;Args...&gt;, \n    ...: Args...\n): ()\n</code></pre> <p>Calls all callbacks of a lifecycle sequentially.</p>"},{"location":"api-reference/core/functions/firesequential/#parameters","title":"Parameters","text":"lifecycle: Lifecycle <p>Lifecycle to call callbacks with.</p>      ...: Args...    <p>Arguments to call the callbacks with.</p>"},{"location":"api-reference/core/functions/firesequential/#returns","title":"Returns","text":""},{"location":"api-reference/core/functions/lifecycle/","title":"lifecycle","text":"function             lifecycle           view code      <pre><code>lifecycle(\n    method: string, \n    onFire: (lifecycle: Lifecycle&lt;Args...&gt;, Args...) -&gt; ()\n): Lifecycle&lt;Args...&gt;\n</code></pre> <p>Constructs and returns a new lifecycle object. Providers with the specified method will be registered.</p>"},{"location":"api-reference/core/functions/lifecycle/#parameters","title":"Parameters","text":"method: string    <p>The provider method that this lifecycle should hook onto.</p>      onFire: (lifecycle: Lifecycle, Args...) -&gt; ()    <p>A method to fire the lifecycle method. It receives itself and the arguments passed to it.</p>"},{"location":"api-reference/core/functions/lifecycle/#returns","title":"Returns","text":"Lifecycle <p>A freshly constructed lifecycle object.</p>"},{"location":"api-reference/core/functions/onlifecycleconstructing/","title":"onLifecycleConstructing","text":"function             onLifecycleConstructing           view code      <pre><code>onLifecycleConstructing(\n    listener: (constructedLifecycle: Lifecycle&lt;Args...&gt;) -&gt; ()\n): () -&gt; ()\n</code></pre> <p>Called just before a constructing lifecycle is returned. The listener callback receives the lifecycle that is constructing.</p> <p>Listener callbacks are expected to be non-yielding and infallible.</p>"},{"location":"api-reference/core/functions/onlifecycleconstructing/#parameters","title":"Parameters","text":"listener: (constructedLifecycle: Lifecycle) -&gt; ()    <p>Fired just before a construcing lifecycle is returned. The listener callback receives the lifecyle that is constructing.</p>"},{"location":"api-reference/core/functions/onlifecycleconstructing/#returns","title":"Returns","text":"() -&gt; ()    <p>A callback that when called removes the listener.</p>"},{"location":"api-reference/core/functions/onlifecycledestroying/","title":"onLifecycleDestroying","text":"function             onLifecycleDestroying           view code      <pre><code>onLifecycleDestroying(\n    listener: (destroyedLifecycle: Lifecycle&lt;Args...&gt;) -&gt; ()\n): () -&gt; ()\n</code></pre> <p>Called just before a lifecycle is destroyed. The listener callback receives the lifecycle that is destroyed.</p> <p>Listener callbacks are expected to be non-yielding and infallible.</p>"},{"location":"api-reference/core/functions/onlifecycledestroying/#parameters","title":"Parameters","text":"listener: (destroyedLifecycle: Lifecycle) -&gt; ()    <p>Fired just before any lifecycle is being destroyed. The listener callbacj receives the lifecycle that is being destroyed.</p>"},{"location":"api-reference/core/functions/onlifecycledestroying/#returns","title":"Returns","text":"() -&gt; ()    <p>A callback that when called removes the listener.</p>"},{"location":"api-reference/core/functions/onlifecycleregistered/","title":"onLifecycleRegistered","text":"function             onLifecycleRegistered           view code      <pre><code>onLifecycleRegistered(\n    listener: (lifecycle: Lifecycle&lt;Args...&gt;, callback: (Args...) -&gt; ()\n): () -&gt; ()\n</code></pre> <p>Called when an object registers a lifecycle method. Listeners are expected to be infallible and non-yielding. The listener receives the callback.</p>"},{"location":"api-reference/core/functions/onlifecycleregistered/#parameters","title":"Parameters","text":"listener: (lifecycle: Lifecycle, callback: (Args...) -&gt; ()    <p>Called when any lifecycle registers a callback.</p>"},{"location":"api-reference/core/functions/onlifecycleregistered/#returns","title":"Returns","text":"() -&gt; ()    <p>A callback that when called removes the listener.</p>"},{"location":"api-reference/core/functions/onlifecycleunregistered/","title":"onLifecycleUnregistered","text":"function             onLifecycleUnregistered           view code      <pre><code>onLifecycleUnregistered(\n    listener: (lifecycle: Lifecycle&lt;Args...&gt;, callback: (Args...) -&gt; ()) -&gt; ()\n): () -&gt; ()\n</code></pre> <p>Called when an object unregisters a lifecycle method. Listeners are expected to be infallible and non-yielding. The listener receives the callback.</p>"},{"location":"api-reference/core/functions/onlifecycleunregistered/#parameters","title":"Parameters","text":"listener: (lifecycle: Lifecycle, callback: (Args...) -&gt; ()) -&gt; ()    <p>Called when any lifecycle unregisters a callback.</p>"},{"location":"api-reference/core/functions/onlifecycleunregistered/#returns","title":"Returns","text":"() -&gt; ()    <p>A callback that when called removes the listener.</p>"},{"location":"api-reference/core/functions/onlifecycleused/","title":"onLifecycleUsed","text":"function             onLifecycleUsed           view code      <pre><code>onLifecycleUsed(\n    listener: (root: Root, lifecycle: Lifecycle) -&gt; ()\n): () -&gt; ()\n</code></pre> <p>Called when a root uses a lifecycle. The listener callback receives the root along with the used lifecycle</p>"},{"location":"api-reference/core/functions/onlifecycleused/#parameters","title":"Parameters","text":"listener: (root: Root, lifecycle: Lifecycle) -&gt; ()    <p>Fired when a root uses a provider. The listener callback receives the root along with the used lifecycle.</p>"},{"location":"api-reference/core/functions/onlifecycleused/#returns","title":"Returns","text":"() -&gt; ()    <p>A callback that when called removes the listener.</p>"},{"location":"api-reference/core/functions/onproviderconstructed/","title":"onProviderConstructed","text":"function             onProviderConstructed           view code      <pre><code>onProviderConstructed(\n    listener: (provider: Provider&lt;unknown&gt;) -&gt; ()\n): () -&gt; ()\n</code></pre> <p>Called just before a constructing provider is returned. The listener callback receives the provider that is constructed.</p> <p>Listener callbacks are expected to be non-yielding and infallible.</p>"},{"location":"api-reference/core/functions/onproviderconstructed/#parameters","title":"Parameters","text":"listener: (provider: Provider) -&gt; ()    <p>Fired just before a constructing provider is returned. The listener callback receives the provider that is constructed.</p>"},{"location":"api-reference/core/functions/onproviderconstructed/#returns","title":"Returns","text":"() -&gt; ()    <p>A callback that when called removes the listener.</p>"},{"location":"api-reference/core/functions/onproviderused/","title":"onProviderUsed","text":"function             onProviderUsed           view code      <pre><code>onProviderUsed(\n    listener: (root: Root, provider: Provider&lt;unknown&gt;) -&gt; ()\n): () -&gt; ()\n</code></pre> <p>Called when a root uses a provider. The listener callback receives the root along with the used provider</p>"},{"location":"api-reference/core/functions/onproviderused/#parameters","title":"Parameters","text":"listener: (root: Root, provider: Provider) -&gt; ()    <p>Fired when a root uses a provider. The listener callback receives the root along with the used provider</p>"},{"location":"api-reference/core/functions/onproviderused/#returns","title":"Returns","text":"() -&gt; ()    <p>A callback that when called removes the listener.</p>"},{"location":"api-reference/core/functions/onrootconstructed/","title":"onRootConstructed","text":"function             onRootConstructed           view code      <pre><code>onRootConstructed(\n    listener: (root: Root) -&gt; ()\n): () -&gt; ()\n</code></pre> <p>Called just before a constructing root is returned. The listener callback receives the root that is constructing.</p> <p>Listener callbacks are expected to be non-yielding and infallible.</p>"},{"location":"api-reference/core/functions/onrootconstructed/#parameters","title":"Parameters","text":"listener: (root: Root) -&gt; ()    <p>Fired just before a constructing root is returned. The listener callback receives the root that is constructing.</p>"},{"location":"api-reference/core/functions/onrootconstructed/#returns","title":"Returns","text":"() -&gt; ()    <p>A callback that when called removes the listener.</p>"},{"location":"api-reference/core/functions/onrootstarted/","title":"onRootStarted","text":"function             onRootStarted           view code      <pre><code>onRootStarted(\n    listener: (root: Root) -&gt; ()\n): () -&gt; ()\n</code></pre> <p>Called just before a root finishes starting. The listener callback receives the root that is starting.</p> <p>Listener callbacks are expected to be non-yielding and infallible.</p>"},{"location":"api-reference/core/functions/onrootstarted/#parameters","title":"Parameters","text":"listener: (root: Root) -&gt; ()    <p>Fired just before a root finishes starting. The listener callback receives the root that is starting.</p>"},{"location":"api-reference/core/functions/onrootstarted/#returns","title":"Returns","text":"() -&gt; ()    <p>A callback that when called removes the listener.</p>"},{"location":"api-reference/core/functions/onsubrootused/","title":"onsubrootused","text":"function             onSubRootUsed           view code      <pre><code>onSubRootUsed(\n    listener: (root: Root, subRoot: Root) -&gt; ()\n): () -&gt; ()\n</code></pre> <p>Called when a \"parent\" root uses a \"sub\" root. The listener callback receives the root along with the used provider</p>"},{"location":"api-reference/core/functions/onsubrootused/#parameters","title":"Parameters","text":"listener: (root: Root, subRoot: Root) -&gt; ()    <p>Fired when a root uses a \"sub\" root. The listener callback receives the \"parent\" root along with the used \"sub\" root</p>"},{"location":"api-reference/core/functions/onsubrootused/#returns","title":"Returns","text":"() -&gt; ()    <p>A callback that when called removes the listener.</p>"},{"location":"api-reference/core/functions/provider/","title":"Provider","text":"function             Provider           view code      <pre><code>Provider(\n    provider: Self &amp; { new: (...unknown) -&gt; unknown, constructor: (unknown, ...unknown) -&gt; unknown }\n): Provider&lt;Self&gt;\n</code></pre> <p>Construct and returns a new provider from a Roblox TypeScript class declaration. Providers provide specific functionality in a game.</p> <p>Intended for use as a class decorator for Roblox TypeScript projects. For Luau projects, consider using prvd instead.</p>"},{"location":"api-reference/core/functions/provider/#parameters","title":"Parameters","text":"provider: Self &amp; { new: (...unknown) -&gt; unknown, constructor: (unknown, ...unknown) -&gt; unknown }    <p>The provider class as generated by Roblox TypeScript.</p>"},{"location":"api-reference/core/functions/provider/#returns","title":"Returns","text":"Provider <p>A newly constructed provider.</p>"},{"location":"api-reference/core/functions/prvd/","title":"prvd","text":"function             prvd           view code      <pre><code>prvd(\n    provider: Self, \n    name: string?\n): Provider&lt;Self&gt;\n</code></pre> <p>Construct and returns a new provider. Providers provide specific functionality in a game.</p> <p>Intended for use as a constructor for Luau projects. For Roblox TypeScript projects, consider using Provider instead.</p>"},{"location":"api-reference/core/functions/prvd/#parameters","title":"Parameters","text":"provider: Self    <p>The provider and associated properties itself.</p>      name: string?"},{"location":"api-reference/core/functions/prvd/#returns","title":"Returns","text":"Provider <p>A newly constructed provider.</p>"},{"location":"api-reference/core/functions/root/","title":"root","text":"function             root           view code      <pre><code>root(): Root\n</code></pre> <p>Construct and returns a new root. Roots are starting points for Prvd 'M Wrong games where providers can be bootstrapped.</p>"},{"location":"api-reference/core/lifecycle/","title":"Index","text":""},{"location":"api-reference/core/lifecycle/#lifecycle","title":"Lifecycle           f               await      No description provided.            f               destroy      No description provided.            f               onRegistered      No description provided.            f               onUnregistered      No description provided.            f               register      No description provided.            f               unregister      No description provided.            f               unregisterAll      No description provided.","text":""},{"location":"api-reference/core/lifecycle/functions/await/","title":"await","text":"function             await           view code      <pre><code>await(\n    lifecycle: Self&lt;Args...&gt;\n): Args... \n</code></pre>"},{"location":"api-reference/core/lifecycle/functions/await/#parameters","title":"Parameters","text":"lifecycle: Self"},{"location":"api-reference/core/lifecycle/functions/await/#returns","title":"Returns","text":"Args..."},{"location":"api-reference/core/lifecycle/functions/destroy/","title":"destroy","text":"function             destroy           view code      <pre><code>destroy(\n    lifecycle: Self&lt;Args...&gt;\n): ()\n</code></pre>"},{"location":"api-reference/core/lifecycle/functions/destroy/#parameters","title":"Parameters","text":"lifecycle: Self"},{"location":"api-reference/core/lifecycle/functions/destroy/#returns","title":"Returns","text":""},{"location":"api-reference/core/lifecycle/functions/onregistered/","title":"onRegistered","text":"function             onRegistered           view code      <pre><code>onRegistered(\n    lifecycle: Self&lt;Args...&gt;, \n    listener: (callback: (Args...) -&gt; ()) -&gt; ()\n): ()\n</code></pre>"},{"location":"api-reference/core/lifecycle/functions/onregistered/#parameters","title":"Parameters","text":"lifecycle: Self      listener: (callback: (Args...) -&gt; ()) -&gt; ()"},{"location":"api-reference/core/lifecycle/functions/onregistered/#returns","title":"Returns","text":""},{"location":"api-reference/core/lifecycle/functions/onunregistered/","title":"onUnregistered","text":"function             onUnregistered           view code      <pre><code>onUnregistered(\n    lifecycle: Self&lt;Args...&gt;, \n    listener: (callback: (Args...) -&gt; ()) -&gt; ()\n): ()\n</code></pre>"},{"location":"api-reference/core/lifecycle/functions/onunregistered/#parameters","title":"Parameters","text":"lifecycle: Self      listener: (callback: (Args...) -&gt; ()) -&gt; ()"},{"location":"api-reference/core/lifecycle/functions/onunregistered/#returns","title":"Returns","text":""},{"location":"api-reference/core/lifecycle/functions/register/","title":"register","text":"function             register           view code      <pre><code>register(\n    lifecycle: Self&lt;Args...&gt;, \n    callback: (Args...) -&gt; ()\n): ()\n</code></pre>"},{"location":"api-reference/core/lifecycle/functions/register/#parameters","title":"Parameters","text":"lifecycle: Self      callback: (Args...) -&gt; ()"},{"location":"api-reference/core/lifecycle/functions/register/#returns","title":"Returns","text":""},{"location":"api-reference/core/lifecycle/functions/unregister/","title":"unregister","text":"function             unregister           view code      <pre><code>unregister(\n    lifecycle: Self&lt;Args...&gt;, \n    callback: (Args...) -&gt; ()\n): ()\n</code></pre>"},{"location":"api-reference/core/lifecycle/functions/unregister/#parameters","title":"Parameters","text":"lifecycle: Self      callback: (Args...) -&gt; ()"},{"location":"api-reference/core/lifecycle/functions/unregister/#returns","title":"Returns","text":""},{"location":"api-reference/core/lifecycle/functions/unregisterall/","title":"unregisterAll","text":"function             unregisterAll           view code      <pre><code>unregisterAll(\n    lifecycle: Self&lt;Args...&gt;\n): ()\n</code></pre>"},{"location":"api-reference/core/lifecycle/functions/unregisterall/#parameters","title":"Parameters","text":"lifecycle: Self"},{"location":"api-reference/core/lifecycle/functions/unregisterall/#returns","title":"Returns","text":""},{"location":"api-reference/core/root/","title":"Index","text":""},{"location":"api-reference/core/root/#root","title":"Root","text":"<p>Roots are entry points to Prvd 'M Wrong games. Use roots to include providers to be started, modules to be required, lifecycles to be registered, and even \"sub\" roots to be started. Call <code>start</code> to bootstrap the root. Later, call <code>stop</code> to clean up the root.</p> <pre><code>local function filterByPattern(pattern: string)\n    return function(module: ModuleScript): boolean\n        return module:find(pattern) ~= nil\n    end\nend\n\n-- roots are entry points for Prvd 'M Wrong games!\nlocal root = prvd.root()\n    :useModules(script.Providers:GetDescendants(), filterByPattern(\"Provider$\"))\n    :useModules(ReplicatedStorage.Providers:GetDescendants(), filterByPattern(\"Provider$\"))\n    :useProvider(prvdLifecycles)\n    :useRoot(prvd.netRoot)\n    :useRoot(prvd.componentRoot)\n    :start()\n\n-- later...\ngame:BindToClose(function()\n    root:stop()\nend)\n</code></pre>        f             destroy      No description provided.        f             start          Starts the root. This should only be called once per root.           f             useLifecycle          Uses the lifecycle as a dependency. When the root is started, all providers with the lifecycle's method will have it registered.           f             useLifecycles          Given an array of lifecycles, uses all lifecycles as dependencies. When the root is started, all providers with each lifecycle's method will have it registered.           f             useModule          Requires a ModuleScript and adds the returned provider to the root, if any. If the provider is unnamed, the provider is named after the ModuleScript name.           f             useModules          Given an array of instances, requires all ModuleScripts and adds the returned provider to the root, if any. If the provider is unnamed, the provider is named after the ModuleScript name. An optional predicate function can be provided to filter the modules.           f             useProvider          Uses the provider to be initialized when the root starts. When the root is started, used providers are resolved in topological loading order while lifecycles in the providers are added as dependencies to be registered.           f             useProviders          Given an array of providers, uses all providers to the root. When the root is started, used providers are resolved in topological loading order while lifecycles in providers are added as dependencies to be registered.           f             useRoot          Uses the given \"sub\" root to be started when the \"parent\" root is started.           f             useRoots          Given an array of \"sub\" roots, uses all roots to be started when the \"parent\" root is started."},{"location":"api-reference/core/root/functions/destroy/","title":"destroy","text":"function             destroy           view code      <pre><code>destroy(\n    root: Self\n): ()\n</code></pre>"},{"location":"api-reference/core/root/functions/destroy/#parameters","title":"Parameters","text":"root: Self"},{"location":"api-reference/core/root/functions/destroy/#returns","title":"Returns","text":""},{"location":"api-reference/core/root/functions/start/","title":"start","text":"function             start           view code      <pre><code>start(\n    root: Root\n): StartedRoot\n</code></pre> <p>Starts the root. This should only be called once per root.</p>"},{"location":"api-reference/core/root/functions/start/#parameters","title":"Parameters","text":"root: Root    <p>The root to start.</p>"},{"location":"api-reference/core/root/functions/start/#returns","title":"Returns","text":"StartedRoot    <p>A root that has been started.</p>"},{"location":"api-reference/core/root/functions/uselifecycle/","title":"useLifecycle","text":"function             useLifecycle           view code      <pre><code>useLifecycle(\n    root: Root, \n    lifecycle: Lifecycle\n): Root\n</code></pre> <p>Uses the lifecycle as a dependency. When the root is started, all providers with the lifecycle's method will have it registered.</p>"},{"location":"api-reference/core/root/functions/uselifecycle/#parameters","title":"Parameters","text":"root: Root    <p>The root that should use the lifecycle.</p>      lifecycle: Lifecycle    <p>The lifecycle to be used.</p>"},{"location":"api-reference/core/root/functions/uselifecycle/#returns","title":"Returns","text":"Root    <p>The same root for convenience.</p>"},{"location":"api-reference/core/root/functions/uselifecycles/","title":"useLifecycles","text":"function             useLifecycles           view code      <pre><code>useLifecycles(\n    root: Root, \n    lifecycles: { Lifecycle }\n): Root\n</code></pre> <p>Given an array of lifecycles, uses all lifecycles as dependencies. When the root is started, all providers with each lifecycle's method will have it registered.</p>"},{"location":"api-reference/core/root/functions/uselifecycles/#parameters","title":"Parameters","text":"root: Root    <p>The root that should use the lifecycles.</p>      lifecycles: { Lifecycle }    <p>The lifecycles to be used.</p>"},{"location":"api-reference/core/root/functions/uselifecycles/#returns","title":"Returns","text":"Root    <p>The same root for convenience.</p>"},{"location":"api-reference/core/root/functions/usemodule/","title":"useModule","text":"function             useModule           view code      <pre><code>useModule(\n    root: Root, \n    module: ModuleScript\n): Root\n</code></pre> <p>Requires a ModuleScript and adds the returned provider to the root, if any. If the provider is unnamed, the provider is named after the ModuleScript name.</p>"},{"location":"api-reference/core/root/functions/usemodule/#parameters","title":"Parameters","text":"root: Root    <p>The root that should use the ModuleScript.</p>      module: ModuleScript    <p>The ModuleScript that should be required.</p>"},{"location":"api-reference/core/root/functions/usemodule/#returns","title":"Returns","text":"Root    <p>The same root for convenience.</p>"},{"location":"api-reference/core/root/functions/usemodules/","title":"useModules","text":"function             useModules           view code      <pre><code>useModules(\n    root: Root, \n    modules: { Instance }, \n    predicate: ((module: ModuleScript) -&gt; boolean)?\n): Root\n</code></pre> <p>Given an array of instances, requires all ModuleScripts and adds the returned provider to the root, if any. If the provider is unnamed, the provider is named after the ModuleScript name. An optional predicate function can be provided to filter the modules.</p>"},{"location":"api-reference/core/root/functions/usemodules/#parameters","title":"Parameters","text":"root: Root    <p>The root that should use the ModuleScripts.</p>      modules: { Instance }    <p>The given instances to require.</p>      predicate: ((module: ModuleScript) -&gt; boolean)?    <p>An optional predicate function to filter the given modules.</p>"},{"location":"api-reference/core/root/functions/usemodules/#returns","title":"Returns","text":"Root    <p>The same root for convenience.</p>"},{"location":"api-reference/core/root/functions/useprovider/","title":"useProvider","text":"function             useProvider           view code      <pre><code>useProvider(\n    root: Root, \n    provider: Provider&lt;unknown&gt;\n): Root\n</code></pre> <p>Uses the provider to be initialized when the root starts. When the root is started, used providers are resolved in topological loading order while lifecycles in the providers are added as dependencies to be registered.</p>"},{"location":"api-reference/core/root/functions/useprovider/#parameters","title":"Parameters","text":"root: Root    <p>The root that should use the provider.</p>      provider: Provider <p>The provider to be providers.</p>"},{"location":"api-reference/core/root/functions/useprovider/#returns","title":"Returns","text":"Root    <p>The same root for convenience.</p>"},{"location":"api-reference/core/root/functions/useproviders/","title":"useProviders","text":"function             useProviders           view code      <pre><code>useProviders(\n    root: Root, \n    providers: { Provider&lt;unknown&gt; }\n): Root\n</code></pre> <p>Given an array of providers, uses all providers to the root. When the root is started, used providers are resolved in topological loading order while lifecycles in providers are added as dependencies to be registered.</p>"},{"location":"api-reference/core/root/functions/useproviders/#parameters","title":"Parameters","text":"root: Root    <p>The root that should use the providers.</p>      providers: { Provider }    <p>The providers to be added.</p>"},{"location":"api-reference/core/root/functions/useproviders/#returns","title":"Returns","text":"Root    <p>The same root for convenience.</p>"},{"location":"api-reference/core/root/functions/useroot/","title":"useRoot","text":"function             useRoot           view code      <pre><code>useRoot(\n    root: Root, \n    subRoot: Root\n): Root\n</code></pre> <p>Uses the given \"sub\" root to be started when the \"parent\" root is started.</p>"},{"location":"api-reference/core/root/functions/useroot/#parameters","title":"Parameters","text":"root: Root    <p>The \"parent\" root that should use the root.</p>      subRoot: Root    <p>The \"sub\" root that should be queued.</p>"},{"location":"api-reference/core/root/functions/useroot/#returns","title":"Returns","text":"Root    <p>The same \"parent\" root for convenience.</p>"},{"location":"api-reference/core/root/functions/useroots/","title":"useRoots","text":"function             useRoots           view code      <pre><code>useRoots(\n    root: Root, \n    subRoots: { Root }\n): Root\n</code></pre> <p>Given an array of \"sub\" roots, uses all roots to be started when the \"parent\" root is started.</p>"},{"location":"api-reference/core/root/functions/useroots/#parameters","title":"Parameters","text":"root: Root    <p>The \"parent\" root that should use the root.</p>      subRoots: { Root }    <p>The \"sub\" roots that should be queued.</p>"},{"location":"api-reference/core/root/functions/useroots/#returns","title":"Returns","text":"Root    <p>The same \"parent\" root for convenience.</p>"},{"location":"api-reference/core/startedroot/","title":"Index","text":""},{"location":"api-reference/core/startedroot/#startedroot","title":"StartedRoot","text":"<p>Pst. I see dead people.</p>        f             stop          Fein', fein', fein', fein'-fein' (yeah) Fein', fein', fein', fein'-fein' (yeah) Fein', fein', fein', fein'-fein' Fein', fein', fein', fein' (yeah)"},{"location":"api-reference/core/startedroot/functions/stop/","title":"stop","text":"function             stop           view code      <pre><code>stop(\n    startedRoot: StartedRoot\n): ()\n</code></pre> <p>Fein', fein', fein', fein'-fein' (yeah) Fein', fein', fein', fein'-fein' (yeah) Fein', fein', fein', fein'-fein' Fein', fein', fein', fein' (yeah)</p>"},{"location":"api-reference/core/startedroot/functions/stop/#parameters","title":"Parameters","text":"startedRoot: StartedRoot    <p>The root to stop.</p>"},{"location":"api-reference/core/startedroot/functions/stop/#returns","title":"Returns","text":""},{"location":"api-reference/knit-compat/","title":"Index","text":""},{"location":"api-reference/knit-compat/#knit","title":"Knit","text":""},{"location":"api-reference/lifecycles/","title":"Index","text":""},{"location":"api-reference/lifecycles/#lifecycles","title":"Lifecycles","text":""},{"location":"learn/","title":"Learn Prvd 'M Wrong","text":"<p>Congratulations on choosing Prvd 'M Wrong, you\u2019re finally making good decisions!</p> <p>You will learn how to build great games with Prvd 'M Wrong, even if you never used it before, with advice from maintainers who know Prvd 'M Wrong best.</p> <p>But first, something important...</p> <p> DO NOT USE PRVD 'M WRONG. IT IS UNFINISHED. </p> <p>Prvd 'M Wrong is still under development. Unless you're really, really, really, REALLY, REALLY willing and able to withstand large, sweeping changes, do not use Prvd 'M Wrong in production. Yes, that was five-reallys important.</p> <p>You will encounter:</p> <ul> <li>missing or incomplete features</li> <li>half-baked packages</li> <li>changes in how things work between versions</li> <li>updates that completely remove existing features</li> <li>evolving recommendations on conventions and project structure</li> </ul> <p>This is not a bad thing! It means we can quickly abandon counterproductive ideas and features, and build a solid foundation for the future.</p> <p>Don't be discouraged though, feel free to follow along with our development and try using the framework in your own time.</p> <p>We hope you enjoy using Prvd 'M Wrong!</p>"},{"location":"learn/#expectations","title":"Expectations","text":"<p>These tutorials assume:</p> <ul> <li>That you're comfortable with Roblox and the Luau scripting language.</li> <li>These tutorials are not an introduction to Luau \u2014 If you'd like to learn,     see the Roblox creator documentation.</li> <li>That \u2014 if you're using Roblox TypeScript \u2014 you're comfortable with TypeScript.</li> <li>These tutorials are not an introduction to TypeScript \u2014 If you'd like to     learn, see the Roblox TypeScript documentation and     the TypeScript handbook.</li> <li>These tutorials also assume you're familiar with Luau, which especially is     important when troubleshooting bugs \u2014 If you'd like to learn,     see the Roblox creator documentation.</li> </ul> <p>Some tutorials might challenge you more than others. Remember, Prvd 'M Wrong is built with you in mind, but it may still take a bit of time to absorb some concepts. Take your time and explore at your own pace.</p>"},{"location":"learn/#support","title":"Support","text":"<p>Prvd 'M Wrong is built with you in mind and our documentation aims to be as useful and comprehensive as possible. However, you might need specific advice on an issue, perhaps you may want to learn Prvd 'M Wrong through other means, or you caught a bug.</p> <p>Whatever you're looking for, feel free to swing by our dedicated thread over the Roblox OSS Discord server. Maintainers drop in frequently alongside eager Prvd 'M Wrong users.</p>"},{"location":"learn/#using-the-documentation","title":"Using the Documentation","text":"<p>The Prvd 'M Wrong documentation aims to be as useful and comprehensive as possible. Scroll down to find the footer with customization settings for the documentation that persist between sessions:</p> <ul> <li>Customize code blocks from a selection of monospace fonts</li> <li> <p>Show relevent documentation for the language you use</p> <ul> <li>Currently supports Luau and TypeScript, with more languages added as the     Roblox ecosystem grows more diverse.</li> </ul> </li> </ul> <p>Try it!</p> <pre><code>local prvd = \"Prvd 'M Wrong\"\nlocal function bestFramework(): string\n    print(`I &lt;3 {prvd}!`)\n    return prvd\nend\n</code></pre> <p> <pre><code>const prvd = \"Prvd 'M Wrong\"\nfunction bestFramework(): string {\n    print(`I &lt;3 ${prvd}!`)\n    return prvd\n}\n</code></pre>"},{"location":"learn/installation/","title":"Installation","text":"<p>Prvd 'M Wrong is distributed as several packages that needs to be installed into your game.</p> <p>For Luau, either use a pre-built Roblox model, install from Pesde, or install from Wally. For Roblox TypeScript, use the NPM package. Otherwise, build from source.</p>"},{"location":"learn/installation/#from-templates","title":"From Templates","text":"<p>New projects can use pre-configured templates with Prvd 'M Wrong out of the box, published under the <code>@prvdmwrong/templates</code> repository.</p> <ol> <li> <p>From a terminal, clone the <code>@prvdmwrong/templates</code> repository:</p> <pre><code>git clone https://github.com/prvdmwrong/templates.git\ncd templates\n</code></pre> </li> <li> <p>Clone any of the templates inside the repository:</p> <ul> <li>For Luau projects:<ul> <li>Use the <code>luau-barebones</code> template for a     pre-configured barebones prelude.</li> <li>Use the <code>luau-comprehensive</code> template for a     comprehensive prelude including Darklua string requires, Wally with     types, and plenty of goodies.</li> </ul> </li> <li>For Roblox TypeScript projects:<ul> <li>Use the <code>rbxts-barebones</code> template for a     pre-configured barebones prelude.</li> <li>Use the <code>rbxts-comprehensive</code> template for     a comprehensive prelude including ESLint and Prettier     pre-configured.</li> </ul> </li> </ul> </li> </ol>"},{"location":"learn/installation/#manual-installation","title":"Manual Installation","text":"<p>For Luau, Prvd 'M Wrong can be installed as a pre-built Roblox model, a Pesde package, or a Wally package. For Roblox TypeScript, Prvd 'M Wrong can be installed as an NPM package.</p>"},{"location":"learn/installation/#pesde","title":"Pesde","text":"<p>Prvd 'M Wrong can be installed as a Pesde package. Pesde packages are published under the <code>@prvdmwrong</code> scope in dai's Pesde registry.</p> <p>Pesde is strongly recommended over other installation methods for it's versatility.</p> <ol> <li> <p>From a terminal, add the desired Prvd 'M Wrong package:</p> <pre><code># it's recommended to alias prvdmwrong/core with prvd!\npesde add prvdmwrong/core -a prvd\n</code></pre> </li> <li> <p>Import the desired Prvd 'M Wrong package through the <code>roblox_packages</code>     directory:</p> <pre><code>local prvd = require(ReplicatedStorage.roblox_packages.prvd)\n</code></pre> </li> </ol>"},{"location":"learn/installation/#using-wally-through-pesde","title":"Using Wally through Pesde","text":"<p>Prvd 'M Wrong can be installed with Pesde's Wally compatibility layer. Notably, older versions of Prvd 'M Wrong published on Wally prior to Pesde <code>0.5</code> can be used.</p> <p>Wally packages are published under the <code>@prvdmwrong</code> scope in Uplift Game's Wally registry.</p> <p>This can be used as a backup option when Prvd 'M Wrong Pesde packages break.</p> <ol> <li> <p>From a terminal, add the desired Prvd 'M Wrong package, noting the <code>wally#</code>     specifier:</p> <pre><code># it's recommended to alias prvdmwrong/core with prvd!\npesde add wally#prvdmwrong/core -a prvd\n</code></pre> </li> <li> <p>Import the desired Prvd 'M Wrong package through the <code>roblox_packages</code>     directory:</p> <pre><code>local prvd = require(ReplicatedStorage.roblox_packages.prvd)\n</code></pre> </li> </ol>"},{"location":"learn/installation/#roblox","title":"Roblox","text":"<p>Prvd 'M Wrong can be installed as a Roblox model.</p> <p>Prvd 'M Wrong 0.2 has not been released yet, so distributed 0.2 models are unavalible. See Build from Source for building Roblox models by source.</p> <ol> <li>Visit the GitHub releases to find the desired Prvd 'M Wrong version.</li> <li>Click the \"Assets\" dropdown to view the downloadable files.</li> <li>Click on <code>prvdmwrong.rbxm</code> to download the bundled Prvd 'M Wrong packages.</li> <li>Open Roblox Studio to import the model. If you are just following the     tutorials, just an empty baseplate will do.</li> <li>Right-click on <code>ReplicatedStorage</code>, and select \"Insert from File\". Select the     <code>prvdmwrong.rbxm</code> you just downloaded. A new folder called <code>prvd</code> should     appear with the bundled packages.</li> <li> <p>Import the desired packages through the imported <code>prvd</code> folder:</p> <pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal prvd = require(ReplicatedStorage.prvd.core)\n</code></pre> </li> </ol>"},{"location":"learn/installation/#wally","title":"Wally","text":"<p>Prvd 'M Wrong can be installed as a Wally package. Wally packages are published under the <code>@prvdmwrong</code> scope in Uplift Game's Wally registry.</p> <p>Consider using Pesde over Wally.</p> <ol> <li> <p>Add the desired Prvd 'M Wrong package in your <code>wally.toml</code> manifest:</p> <pre><code># it's recommended to alias prvdmwrong/core with prvd!\n[dependencies]\nprvd = \"prvdmwrong/core@0.2.*\"\n</code></pre> </li> <li> <p>From a terminal, install all Wally packages:</p> <pre><code>wally install\n</code></pre> </li> <li> <p>Import the desired Prvd 'M Wrong package through the <code>Packages</code>     directory:</p> <pre><code>local prvd = require(ReplicatedStorage.Packages.prvd)\n</code></pre> </li> </ol>"},{"location":"learn/installation/#npm","title":"NPM","text":"<p>For TypeScript projects that compile using Roblox TypeScript, Prvd 'M Wrong can be installed as an NPM package.</p> <p>NPM packages are published under the <code>@prvdmwrong</code> scope in the NPM registry.</p> NPMPNPMYarn <ol> <li> <p>From a terminal, add the desired Prvd 'M Wrong package:</p> <pre><code>npm i @prvdmwrong/core\n</code></pre> </li> <li> <p>Import the package through <code>node_modules</code>:</p> <pre><code>import prvd from \"@prvdmwrong/core\"\n</code></pre> </li> </ol> <ol> <li> <p>From a terminal, add the desired Prvd 'M Wrong package:</p> <pre><code>pnpm i @prvdmwrong/core\n</code></pre> </li> <li> <p>Import the package through <code>node_modules</code>:</p> <pre><code>import prvd from \"@prvdmwrong/core\"\n</code></pre> </li> </ol> <ol> <li> <p>From a terminal, add the desired Prvd 'M Wrong package:</p> <pre><code>yarn add @prvdmwrong/core\n</code></pre> </li> <li> <p>Import the package through <code>node_modules</code>:</p> <pre><code>import prvd from \"@prvdmwrong/core\"\n</code></pre> </li> </ol>"},{"location":"learn/installation/#environment-setup","title":"Environment Setup","text":"<p>Because Prvd 'M Wrong does not publish packages under the <code>@rbxts</code> scope, Roblox TypeScript will refuse to use it.</p> <p>While this helpfully prevents you from using other <code>node_modules</code>, Roblox TypeScript needs to be configured to use Prvd 'M Wrong.</p> <p>This only needs to be done once per each environment.</p> <ol> <li> <p>Add <code>@prvdmwrong</code> to <code>node_modules</code> in your project file(s), it may be nested     behind several levels:</p> <pre><code>\"node_modules\": {\n    \"$className\": \"Folder\",\n    \"@rbxts\": {\n        \"$path\": \"node_modules/@rbxts\"\n    },\n    \"@prvdmwrong\": {\n        \"$path\": \"node_modules/@prvdmwrong\"\n    }\n}\n</code></pre> </li> <li> <p>Add <code>@prvdmwrong</code> to <code>tsconfig.json</code>'s <code>typeRoots</code>, it may be nested behind     several levels:</p> <pre><code>\"typeRoots\": [\n    \"node_modules/@rbxts\",\n    \"node_modules/@prvdmwrong\"\n],\n</code></pre> </li> </ol>"},{"location":"learn/installation/#build-from-source","title":"Build from Source","text":"<p>Prvd 'M Wrong can be built from source.</p> <p>It is not recommended to build Prvd 'M Wrong from source. Consider using one of the listed installation methods instead. This section is only for Prvd 'M Wrong contributors.</p> <ol> <li> <p>From a terminal, clone the <code>@prvdmwrong/prvdmwrong</code> repository:</p> <pre><code>git clone https://github.com/prvdmwrong/prvdmwrong.git\ncd prvdmwrong\n</code></pre> </li> <li> <p>Checkout the <code>0.2</code> branch:</p> <pre><code>git checkout 0.2\n</code></pre> </li> <li> <p>Install all required tooling with Rokit:</p> <pre><code>rokit install\n</code></pre> </li> <li> <p>Run the build script:</p> <pre><code>lune run build\n</code></pre> <p>Configuration options are availible in <code>prvdmwrong.toml</code> for each packages and the whole repository.</p> </li> <li> <p>Find the distributables in the <code>build</code> directory.</p> <ul> <li><code>build/packages</code> has individual source files for each package that can be published to Wally/Pesde/NPM</li> <li><code>build/models</code> has individual <code>.rbxm</code> models for each package</li> <li><code>build/prvdmwrong.rbxl</code> is a Roblox game with all built Prvd 'M Wrong packages in ReplicatedStorage</li> <li><code>build/prvdmwrong.rbxm</code> is a <code>.rbxm</code> model with all built Prvd 'M Wrong packages</li> </ul> </li> </ol>"},{"location":"learn/components/","title":"Components","text":"<p>!!! warning \"This article is a stub. You can help Prvd 'M Wrong by expanding it.\"</p>"},{"location":"learn/components/attributes/","title":"Attributes","text":"<p>!!! warning \"This article is a stub. You can help Prvd 'M Wrong by expanding it.\"</p>"},{"location":"learn/components/inheritance/","title":"Inheritance","text":"<p>!!! warning \"This article is a stub. You can help Prvd 'M Wrong by expanding it.\"</p>"},{"location":"learn/extra/migrating-from-knit/","title":"From Knit","text":"<p>!!! warning \"This article is a stub. You can help Prvd 'M Wrong by expanding it.\"</p>"},{"location":"learn/extra/migrating-from-lumin/","title":"From Lumin Framework","text":"<p>!!! warning \"This article is a stub. You can help Prvd 'M Wrong by expanding it.\"</p>"},{"location":"learn/extra/upgrading-from-0.1-to-0.2/","title":"From Prvd 'M Wrong 0.1 to 0.2","text":"<p>!!! warning \"This article is a stub. You can help Prvd 'M Wrong by expanding it.\"</p>"},{"location":"learn/extra/why-prvd-m-wrong/","title":"Why Prvd 'M Wrong?","text":"<p>There are countless frameworks besides Prvd 'M Wrong that are successful in the past, including:</p> <ul> <li>Knit by sleitnick</li> <li>Flamework by fireboltofdeath</li> <li>Nevermore by Quenty</li> <li>Lumin Framework by Lumin Labs</li> </ul> <p>So why build Prvd 'M Wrong when other frameworks exist? Because the world today is not the same when those frameworks are made:</p> <ul> <li>Luau has significantly improved over the years, with the debut of a new solver   while other frameworks are devoid of type safety and intellisense, worsening   the developer experience.</li> <li>Note that there is still an appetite for TypeScript packages, though     TypeScript should only complement the package.</li> <li>Buffer networking has become standard while most frameworks only provide a   light wrapper around RemoteEvents.</li> <li>The Luau ecosystem has significantly grown with plenty of packages to cover   most needs. However, most frameworks are opinionated and requires specific   packages and workflows. There is a void left for an unopinionated framework.</li> <li>The conventions promoted by other frameworks (e.g. splitting between services   and controllers) are sub-optimal.</li> </ul> <p>In addition, all of these frameworks have major drawbacks:</p> <ul> <li>Knit is unmaintained, introduces a hefty level of bloat and has subpar types.   Prvd 'M Wrong backfills what Knit lacked being dependency resolution and   complete IntelliSense.</li> <li>Flamework requires TypeScript and is tightly coupled with it's   transformer/compiler. As such, type information is lost during compilation.</li> <li>Nevermore is notoriously opinionated being geared just for Quenty, has an   absurd amount of packages most developers do not touch, misuses npm as a Lua   package manager, and has zero types.</li> <li>Lumin Framework features rudimentary controller and lifecycle API ripped from   Prvd 'M Wrong, to which Prvd 'M Wrong excels it's implementation while Lumin   Framework only does rudimentary dependency resolution. Lumin Framework also   does not complement TypeScript.</li> <li>The documentation lies about Prvd 'M Wrong. Prvd 'M Wrong sparingly uses     metatables as useful syntax sugar, and provides APIs because either it is a     foundational feature or it provides a significant need. Consider Prvd 'M     Wrong as a small sacrifice for several useful features.</li> <li>Lumin Framework historically had a different API than Prvd 'M Wrong, but     since version 9 has mirrored Prvd 'M Wrong's provider API. It is not the     other way around.</li> </ul> <p>In addition to these shifting requirements, there are also opportunities to improve on the developer experience, performance, and extensibility.</p> <p>Prvd 'M Wrong was in parts, created to address these new requirements and take on these opportunities, but also take all of the lessons and ideas learned from these projects and build a framework that can solve this problem for good:</p> <ul> <li>Prvd 'M Wrong uses the new Luau type solver for it's strengths, eg. providers   feature complete type safety.</li> </ul> <p>Prvd 'M Wrong also acknowledges that developers will not migrate from any of the existing frameworks managers without good reason, it needs to be substantially better and require virtually no effort to migrate. Prvd 'M Wrong solves this by providing compatibility modules and migration guides for other frameworks.</p>"},{"location":"learn/foundations/lifecycles/","title":"Lifecycles","text":"<p>!!! warning \"This article is a stub. You can help Prvd 'M Wrong by expanding it.\"</p>"},{"location":"learn/foundations/modding/","title":"Modding","text":"<p>!!! warning \"This article is a stub. You can help Prvd 'M Wrong by expanding it.\"</p>"},{"location":"learn/foundations/providers/","title":"Providers","text":"<p>This article is a stub. You can help Prvd 'M Wrong by expanding it.</p> <p>Prvd 'M Wrong is used to create service providers, which provide a specific function for a game. Use providers to compose the top-level logic of a game.</p>"},{"location":"learn/foundations/providers/#setup","title":"Setup","text":"<p>Prvd 'M Wrong is boring. You get the freedom to structure a game however you like and use whatever complementary libraries you want. This article assumes the following structure, though you are free to divvy it up:</p> <pre><code>ReplicatedStorage\n \u2514 Packages\n    \u2514 prvd\nServerScriptService\n \u251c Providers\n \u2514 Server.server.luau\n</code></pre> <pre><code>ReplicatedStorage\n \u2514 Packages\n    \u2514 prvd\nServerScriptService\n \u251c Providers\n \u2514 Server.server.ts\n</code></pre> <p>Let's keep the startup code in <code>Server.server.luau .ts</code>. Prvd 'M Wrong games begin with a starting root.</p> <p>Create a starting root with <code>prvd.root()</code>:</p> Server.server.luau<pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal prvd = require(ReplicatedStorage.Packages.prvd)\n\nlocal root = prvd.root()\n</code></pre> Server.server.ts<pre><code>import * as prvd from \"@prvdmwrong/core\";\n\nconst root = prvd.root();\n</code></pre> <p>Most Prvd 'M Wrong games store providers inside ModuleScripts. Let's include all descendant modules in the <code>Providers</code> directory through <code>useModules()</code>:</p> Server.server.luau<pre><code>local root = prvd.root()\n    :useModules(script.parent.Providers:GetDescendants())\n</code></pre> Server.server.ts<pre><code>const root = prvd.root()\n  .useModules(script.parent.Providers.GetDescendants());\n</code></pre> <p>Now Prvd 'M Wrong can be started:</p> Server.server.luau<pre><code>local root = prvd.root()\n    :useModules(script.parent.Providers:GetDescendants())\n    :start()\n</code></pre> Server.server.ts<pre><code>const root = prvd.root()\n  .useModules(script.parent.Providers.GetDescendants())\n  .start();\n</code></pre> <p>That's the bare minimum needed to start a Prvd 'M Wrong game. <code>start()</code> returns a started root which can be stopped by calling <code>stop()</code>:</p> Server.server.luau<pre><code>-- later when the server shuts down\ngame:BindToClose(function()\n    root:stop()\nend)\n</code></pre> Server.server.ts<pre><code>// later, when the server shuts down\ngame.BindToClose(() =&gt; root.stop());\n</code></pre> <p>Roots will be further elaborated later. Now, you can make Prvd 'M Wrong's simplest object: providers.</p>"},{"location":"learn/foundations/providers/#providers_1","title":"Providers","text":"<p>Prvd 'M Wrong is used to create service providers, which provide a specific function for a game. Use providers to compose the top-level logic of a game.</p> <p>As your first provider, lets create a provider to track some player session information.</p> <p>Create a new ModuleScript under the Providers directory called <code>PlayerProvider</code>. Then, create a new table for your provider:</p> <pre><code>ServerScriptService\n \u251c Providers\n+\u2502 \u2514 PlayerProvider.luau\n \u2514 Server.server.luau\n</code></pre> PlayerProvider.luau<pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal prvd = require(ReplicatedStorage.Packages.prvd)\n\nlocal PlayerProvider = {}\n</code></pre> <p>To construct a provider, call <code>prvd</code> as if it is a constructor with the provider:</p> PlayerProvider.luau<pre><code>local PlayerProvider = {}\n\nreturn prvd(PlayerProvider)\n</code></pre> <p>It's strongly recommended to module return the provider constructed from <code>prvd()</code> so providers can be gradually built up before being returned by the module. This allows Luau to infer useful types and for Prvd 'M Wrong to automatically name it after the ModuleScript name.</p> <p>Do NOT lazily instantiate a provider with <code>prvd()</code>, this \"seals\" the provider and will cause type errors:</p> <pre><code>-- bad!\nlocal PlayerProvider = prvd({})\n\n-- TypeError: Cannot add property 'someFutureProperty' to table '{ }' &amp; '{| loadOrder: ... |}'\nPlayerProvider.someFutureProperty = {}\n\nreturn PlayerProvider\n</code></pre> <p>Do NOT instantiate the <code>prvd()</code> in one go, this worsens Luau type safety:</p> <pre><code>-- bad!\nreturn prvd {\n  someFutureMethod = function(self)\n    -- self is inferred as `a` here... not very useful!\n  end\n}\n</code></pre> <p>DO gradually build the provider, then wrap the module return with <code>prvd()</code>:</p> <pre><code>-- good!\nlocal PlayerProvider = {}\nreturn prvd(PlayerProvider)\n</code></pre> <p>Create a new ModuleScript under the Providers directory called <code>PlayerProvider</code>. Then, create a new class for your provider:</p> <pre><code>ServerScriptService\n \u251c Providers\n+\u2502 \u2514 PlayerProvider.ts\n \u2514 Server.server.ts\n</code></pre> PlayerProvider.ts<pre><code>import \"@prvdmwrong/core\";\n\nexport class PlayerProvider {}\n</code></pre> <p>To construct a provider, import the <code>Provider</code> class decorator from Prvd 'M Wrong and use it:</p> PlayerProvider.ts<pre><code>import { Provider } from \"@prvdmwrong/core\";\n\n@Provider\nexport class PlayerProvider {}\n</code></pre> <p>Games often track player session information, such as when the player joined or the player's leaderstats. Let's define a <code>PlayerSession</code> type, along with an <code>playerSessions</code> property to store each player's session information:</p> PlayerProvider.luau<pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal prvd = require(ReplicatedStorage.Packages.prvd)\n\nexport type PlayerSession = {\n    joinedAt: number,\n    coins: number\n}\n\nlocal PlayerProvider = {}\nPlayerProvider.playerSessions = {} :: { [Player]: PlayerSession }\n\nreturn prvd(PlayerProvider)\n</code></pre> PlayerProvider.ts<pre><code>import { Provider } from \"@prvdmwrong/core\";\n\nexport interface PlayerSession {\n  joinedAt: number;\n  coins: number;\n}\n\n@Provider\nexport class PlayerProvider {\n  playerSessions = new Map&lt;Player, PlayerSession&gt;();\n}\n</code></pre>"},{"location":"learn/foundations/providers/#lifecycles","title":"Lifecycles","text":""},{"location":"learn/foundations/providers/#dependencies","title":"Dependencies","text":""},{"location":"learn/foundations/providers/#why-providers","title":"Why Providers?","text":"<p>Luau</p> <p>TypeScript</p>"},{"location":"learn/foundations/roots/","title":"Roots","text":"<p>!!! warning \"This article is a stub. You can help Prvd 'M Wrong by expanding it.\"</p>"},{"location":"learn/net/","title":"Net","text":"<p>!!! warning \"This article is a stub. You can help Prvd 'M Wrong by expanding it.\"</p>"},{"location":"learn/net/middlewares/","title":"Middlewares","text":"<p>!!! warning \"This article is a stub. You can help Prvd 'M Wrong by expanding it.\"</p>"},{"location":"learn/net/namespaces/","title":"Namespaces","text":"<p>!!! warning \"This article is a stub. You can help Prvd 'M Wrong by expanding it.\"</p>"},{"location":"learn/net/oneway-events/","title":"One-way Events","text":"<p>!!! warning \"This article is a stub. You can help Prvd 'M Wrong by expanding it.\"</p>"},{"location":"learn/net/twoway-events/","title":"Two-way Events","text":"<p>!!! warning \"This article is a stub. You can help Prvd 'M Wrong by expanding it.\"</p>"}]}